using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.BaseServer.IPC.Objects;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Stump.Server.AuthServer.Database
{
    [TableName("accounts")]
    public class Account : IAutoGeneratedRecord
    {
        // FIELDS
        private DateTime? m_loadedLastConnection;
        private string m_loadedLastConnectionIP;
        private List<PlayableBreedEnum> m_availableBreeds;
        private ushort m_availableBreedsFlag;
        private DateTime? m_lastConnection;
        private string m_lastConnectedIp;

        // PROPERTIES
        public int Id
        {
            get;
            set;
        }
        public string Login
        {
            get;
            set;
        }
        public string PasswordHash
        {
            get;
            set;
        }
        public string Nickname
        {
            get;
            set;
        }
        public RoleEnum Role
        {
            get;
            set;
        }
        [Ignore]
        public ushort AvailableBreedsFlag
        {
            get
            {
                return this.m_availableBreedsFlag;
            }
            set
            {
                this.m_availableBreedsFlag = value;
                this.m_availableBreeds = new List<PlayableBreedEnum>();
                this.m_availableBreeds.AddRange(Enum.GetValues(typeof(PlayableBreedEnum)).Cast<PlayableBreedEnum>().Where(new Func<PlayableBreedEnum, bool>(this.IsBreedAvailable)));
            }
        }
        [NullString]
        public string Ticket
        {
            get;
            set;
        }
        public string SecretQuestion
        {
            get;
            set;
        }
        public string SecretAnswer
        {
            get;
            set;
        }
        public string Lang
        {
            get;
            set;
        }
        [NullString]
        public string Email
        {
            get;
            set;
        }
        public DateTime CreationDate
        {
            get;
            set;
        }
        public int Tokens
        {
            get;
            set;
        }
        public int NewTokens
        {
            get;
            set;
        }
        public DateTime? LastVote
        {
            get;
            set;
        }
        public DateTime? LastConnection
        {
            get
            {
                return this.m_lastConnection;
            }
            set
            {
                this.m_lastConnection = value;
                if (!this.m_loadedLastConnection.HasValue)
                {
                    this.m_loadedLastConnection = value;
                }
            }
        }
        [NullString]
        public string LastConnectedIp
        {
            get
            {
                return this.m_lastConnectedIp;
            }
            set
            {
                this.m_lastConnectedIp = value;
                if (this.m_loadedLastConnectionIP == null)
                {
                    this.m_loadedLastConnectionIP = value;
                }
            }
        }
        public int? LastConnectionWorld
        {
            get;
            set;
        }
        public DateTime SubscriptionEnd
        {
            get;
            set;
        }
        public bool IsBanned
        {
            get;
            set;
        }
        public bool IsLifeBanned
        {
            get
            {
                return !this.BanEndDate.HasValue && this.IsBanned;
            }
        }
        [NullString]
        public string BanReason
        {
            get;
            set;
        }
        public DateTime? BanEndDate
        {
            get;
            set;
        }
        public int? BannerAccountId
        {
            get;
            set;
        }
        [Ignore]
        public List<WorldCharacter> WorldCharacters
        {
            get;
            set;
        }
        [Ignore]
        public List<PlayableBreedEnum> AvailableBreeds
        {
            get
            {
                if (this.m_availableBreeds == null)
                {
                    this.m_availableBreeds = new List<PlayableBreedEnum>();
                    this.m_availableBreeds.AddRange(Enum.GetValues(typeof(PlayableBreedEnum)).Cast<PlayableBreedEnum>().Where(new Func<PlayableBreedEnum, bool>(this.IsBreedAvailable)));
                }
                return this.m_availableBreeds;
            }
            set
            {
                this.m_availableBreeds = value;
                this.m_availableBreedsFlag = (ushort)value.Aggregate(0, (int current, PlayableBreedEnum breedEnum) => current | 1 << breedEnum - PlayableBreedEnum.Feca);
            }
        }

        public Account()
        {
            this.AvailableBreedsFlag = 65535;
            this.WorldCharacters = new List<WorldCharacter>();
        }

        public AccountData Serialize()
        {
            AccountData accountData = new AccountData()
            {
                Id = this.Id,
                Login = this.Login,
                PasswordHash = this.PasswordHash,
                Nickname = this.Nickname,
                AvailableBreeds = this.AvailableBreeds,
                Ticket = this.Ticket,
                SecretQuestion = this.SecretQuestion,
                SecretAnswer = this.SecretAnswer,
                Lang = this.Lang,
                Email = this.Email,
                CreationDate = this.CreationDate,
                BanEndDate = this.BanEndDate,
                BanReason = this.BanReason,
                LastConnection = this.m_loadedLastConnection,
                LastConnectionIp = this.m_loadedLastConnectionIP,
                SubscriptionEndDate = this.SubscriptionEnd,
                Tokens = (uint)this.Tokens,
                LastVote = this.LastVote,
                BreedFlags = this.AvailableBreedsFlag,
                Characters = WorldCharacters.Select(entry => new WorldCharacterData(entry.CharacterId, entry.WorldId)).ToList(),
                DeletedCharactersCount = 0,
                IsBanned = false,
                IsJailed = false,
                LastDeletedCharacterDate = DateTime.Now.Subtract(TimeSpan.FromDays(4)),
                UserGroupId = (int)Role
            };
            return accountData;
        }

        public bool IsBreedAvailable(PlayableBreedEnum breed)
        {
            bool result;
            if (breed <= PlayableBreedEnum.UNDEFINED)
            {
                result = false;
            }
            else
            {
                int num = 1 << breed - PlayableBreedEnum.Feca;
                result = ((this.AvailableBreedsFlag & (long)num) == (long)num);
            }
            return result;
        }

        public sbyte GetCharactersCountByWorld(int worldId)
        {
            return (sbyte)this.WorldCharacters.Count((WorldCharacter entry) => entry.WorldId == worldId);
        }

        public IEnumerable<int> GetWorldCharactersId(int worldId)
        {
            return
                from c in this.WorldCharacters
                where c.WorldId == worldId
                select c.CharacterId;
        }
    }
}