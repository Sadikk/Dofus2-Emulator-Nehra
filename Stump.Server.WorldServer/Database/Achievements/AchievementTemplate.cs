using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Classes;
using Stump.DofusProtocol.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Core.Network;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Game.Achievements;
using Stump.Server.WorldServer.Game.Achievements.Criterions;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Stump.Server.WorldServer.Database.Achievements
{
    [D2OClass("Achievement", "com.ankamagames.dofus.datacenter.quest", true), TableName("achievements_templates")]
    public class AchievementTemplate : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
    {   
        // FIELDS
        private const double REWARD_SCALE_CAP = 1.5;
        private const double REWARD_REDUCED_SCALE = 0.7;

        private string m_description;
        private string m_name;
        private int[] m_objectiveIds;
        private int[] m_rewardIds;
        private string m_objectiveIdsCSV;
        private string m_rewardIdsCSV;
        private AchievementObjectiveRecord[] m_objectives;
        private AchievementRewardRecord[] m_rewards;

        // PROPERTIES
        [PrimaryKey("Id", false)]
        public uint Id
        {
            get;
            set;
        }
        public uint NameId
        {
            get;
            set;
        }
        [Ignore]
        public string Name
        {
            get
            {
                if (this.m_name == null)
                {
                    this.m_name = Singleton<TextManager>.Instance.GetText(this.NameId);
                }
                return this.m_name;
            }
        }
        public uint CategoryId
        {
            get;
            set;
        }
        public uint DescriptionId
        {
            get;
            set;
        }
        [Ignore]
        public string Description
        {
            get
            {
                if (this.m_description == null)
                {
                    this.m_description = Singleton<TextManager>.Instance.GetText(this.DescriptionId);
                }
                return this.m_description;
            }
        }
        public int IconId
        {
            get;
            set;
        }
        public uint Points
        {
            get;
            set;
        }
        public uint Level
        {
            get;
            set;
        }
        public uint Order
        {
            get;
            set;
        }
        public float KamasRatio
        {
            get;
            set;
        }
        public float ExperienceRatio
        {
            get;
            set;
        }
        public bool KamasScaleWithPlayerLevel
        {
            get;
            set;
        }
        [Ignore]
        public int[] ObjectiveIds
        {
            get
            {
                return this.m_objectiveIds;
            }
            set
            {
                this.m_objectiveIds = value;
                this.m_objectiveIdsCSV = value.ToCSV(",");
            }
        }
        [Ignore]
        public AchievementObjectiveRecord[] Objectives
        {
            get
            {
                return this.m_objectives;
            }
        }
        public string ObjectiveIdsCSV
        {
            get
            {
                return this.m_objectiveIdsCSV;
            }
            set
            {
                this.m_objectiveIdsCSV = value;
                this.m_objectiveIds = value.FromCSV<int>(",");
            }
        }
        [Ignore]
        public int[] RewardIds
        {
            get
            {
                return this.m_rewardIds;
            }
            set
            {
                this.m_rewardIds = value;
                this.m_rewardIdsCSV = value.ToCSV(",");
            }
        }
        [Ignore]
        public AchievementRewardRecord[] Rewards
        {
            get
            {
                return this.m_rewards;
            }
        }
        public string RewardIdsCSV
        {
            get
            {
                return this.m_rewardIdsCSV;
            }
            set
            {
                this.m_rewardIdsCSV = value;
                this.m_rewardIds = value.FromCSV<int>(",");
            }
        }

        // CONSTRUCTORS

        // METHODS
        public void Initialize()
        {
            this.m_objectives = this.m_objectiveIds
                .Select(entry => Singleton<AchievementManager>.Instance.TryGetAchievementObjective((uint)entry))
                .Where(entry => entry != null)
                .ToArray();

            this.m_rewards = this.m_rewardIds
                .Select(entry => Singleton<AchievementManager>.Instance.TryGetAchievementReward((uint)entry))
                .Where(entry => entry != null)
                .ToArray();
        }

        public void BeforeSave(bool insert)
        {

        }

        public virtual void AssignFields(object d2oObject)
        {
            var item = (Achievement)d2oObject;
            this.Id = item.id;
            this.NameId = item.nameId;
            this.CategoryId = item.categoryId;
            this.DescriptionId = item.descriptionId;
            this.IconId = item.iconId;
            this.Points = item.points;
            this.Level = item.level;
            this.Order = item.order;
            this.KamasRatio = item.kamasRatio;
            this.ExperienceRatio = item.experienceRatio;
            this.KamasScaleWithPlayerLevel = item.kamasScaleWithPlayerLevel;
            this.ObjectiveIds = item.objectiveIds.ToArray();
            this.RewardIds = item.rewardIds.ToArray();
        }

        public int GetKamasReward(WorldClient client)
        {
            var ratio = this.KamasScaleWithPlayerLevel ? client.Character.Level : this.Level;

            return (int)((Math.Pow(ratio, 2) + 20 * ratio - 20) * this.KamasRatio);
        }

        public int GetExperienceReward(WorldClient client)
        {
            var loc6 = 1 + 0 /*% du serveur + perso*/ / 100;
            if (client.Character.Level > this.Level)
            {
                var rewardScale = (uint)Math.Min(client.Character.Level, this.Level * REWARD_SCALE_CAP);

                return (int)((1 - REWARD_REDUCED_SCALE) * this.GetFixeExperienceReward(this.Level, 1, this.ExperienceRatio) + REWARD_REDUCED_SCALE * this.GetFixeExperienceReward(rewardScale, 1, this.ExperienceRatio)) * loc6;
            }

            return (int)this.GetFixeExperienceReward(client.Character.Level, 1, this.ExperienceRatio) * loc6;
        }
        private double GetFixeExperienceReward(uint param1, double param2, double param3)
        {
            return param1 * Math.Pow(100 + 2 * param1, 2) / 20 * param2 * param3;
        }

        public IEnumerable<AbstractCriterion> GetCriterions()
        {
            return this.m_objectives.Select(entry => entry.AbstractCriterion);
        }

        public DofusProtocol.Types.Achievement GetAchievement(PlayerAchievement player)
        {
            return new DofusProtocol.Types.Achievement((ushort)this.Id, 
                from entry in this.m_objectives
                    where player.ContainsCriterion(entry.Criterion)
                    select entry.GetAchievementObjective(player),
                from entry in this.m_objectives
                    where !player.ContainsCriterion(entry.Criterion)
                    select entry.GetAchievementStartedObjective(player));
        }
    }
}
