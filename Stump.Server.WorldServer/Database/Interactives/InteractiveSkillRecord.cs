using Stump.Core.Reflection;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.BaseServer.Database;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Characters;
using Stump.Server.WorldServer.Game.Conditions;
using Stump.Server.WorldServer.Game.Interactives;
using Stump.Server.WorldServer.Game.Interactives.Skills;

namespace Stump.Server.WorldServer.Database.Interactives
{
	[TableName("interactives_skills")]
	public class InteractiveSkillRecord : ParameterizableRecord, IAutoGeneratedRecord
	{
		public const int DEFAULT_TEMPLATE = 184;
		private int? m_customTemplateId;
		private InteractiveSkillTemplate m_template;
		private ConditionExpression m_conditionExpression;
		public int Id
		{
			get;
			set;
		}
		public string Type
		{
			get;
			set;
		}
		public int Duration
		{
			get;
			set;
		}
		public int? CustomTemplateId
		{
			get
			{
				return this.m_customTemplateId;
			}
			set
			{
				this.m_customTemplateId = value;
				this.m_template = null;
			}
		}
		protected virtual int GenericTemplateId
		{
			get
			{
				return 184;
			}
		}
		[Ignore]
		public virtual InteractiveSkillTemplate Template
		{
			get
			{
				InteractiveSkillTemplate arg_43_0;
				if ((arg_43_0 = this.m_template) == null)
				{
					arg_43_0 = (this.m_template = Singleton<InteractiveManager>.Instance.GetSkillTemplate(this.CustomTemplateId.HasValue ? this.CustomTemplateId.Value : this.GenericTemplateId));
				}
				return arg_43_0;
			}
		}
		[NullString]
		public string Condition
		{
			get;
			set;
		}
		[Ignore]
		public ConditionExpression ConditionExpression
		{
			get
			{
				ConditionExpression result;
				if (string.IsNullOrEmpty(this.Condition) || this.Condition == "null")
				{
					result = null;
				}
				else
				{
					ConditionExpression arg_47_0;
					if ((arg_47_0 = this.m_conditionExpression) == null)
					{
						arg_47_0 = (this.m_conditionExpression = ConditionExpression.Parse(this.Condition));
					}
					result = arg_47_0;
				}
				return result;
			}
			set
			{
				this.m_conditionExpression = value;
				this.Condition = value.ToString();
			}
		}
		public bool IsConditionFilled(Character character)
		{
			return this.ConditionExpression == null || this.ConditionExpression.Eval(character);
		}
		public virtual Skill GenerateSkill(int id, InteractiveObject interactiveObject)
		{
			return Singleton<DiscriminatorManager<Skill>>.Instance.Generate<int, InteractiveSkillRecord, InteractiveObject>(this.Type, id, this, interactiveObject);
		}
	}
}
