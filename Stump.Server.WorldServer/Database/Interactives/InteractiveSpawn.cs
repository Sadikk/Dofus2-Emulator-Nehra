using NLog;
using Stump.Core.Reflection;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.World.Maps;
using Stump.Server.WorldServer.Game.Interactives;
using Stump.Server.WorldServer.Game.Maps;
using Stump.Server.WorldServer.Game.Maps.Cells;

namespace Stump.Server.WorldServer.Database.Interactives
{
	[TableName("interactives_spawns")]
	public class InteractiveSpawn : IAutoGeneratedRecord
	{
		private static readonly Logger logger = LogManager.GetCurrentClassLogger();
		private Map m_map;
		private InteractiveTemplate m_template;
		public int Id
		{
			get;
			set;
		}
		public int TemplateId
		{
			get;
			set;
		}
		[Ignore]
		public InteractiveTemplate Template
		{
			get
			{
				InteractiveTemplate arg_23_0;
				if ((arg_23_0 = this.m_template) == null)
				{
					arg_23_0 = (this.m_template = Singleton<InteractiveManager>.Instance.GetTemplate(this.TemplateId));
				}
				return arg_23_0;
			}
		}
		public int ElementId
		{
			get;
			set;
		}
		public int MapId
		{
			get;
			set;
		}
		[Ignore]
		public System.Collections.Generic.List<InteractiveSkillRecord> Skills
		{
			get;
			set;
		}
		public InteractiveSpawn()
		{
			this.Skills = new System.Collections.Generic.List<InteractiveSkillRecord>();
		}
		public System.Collections.Generic.IEnumerable<InteractiveSkillRecord> GetSkills()
		{
			return (this.Template != null) ? this.Template.Skills : this.Skills;
		}
		public ObjectPosition GetPosition()
		{
			Map map = this.GetMap();
			MapElement[] array = map.Record.FindMapElement(this.ElementId);
			ObjectPosition result;
			if (array.Length <= 0)
			{
				result = new ObjectPosition(map, null);
			}
			else
			{
				if (array.Length > 1)
				{
					InteractiveSpawn.logger.Debug("More than 1 elements found in interactive id = {0}", this.Id);
				}
				short cellId = array[0].CellId;
				result = new ObjectPosition(map, cellId);
			}
			return result;
		}
		public Map GetMap()
		{
			Map arg_23_0;
			if ((arg_23_0 = this.m_map) == null)
			{
                arg_23_0 = (this.m_map = Singleton<Game.World>.Instance.GetMap(this.MapId));
			}
			return arg_23_0;
		}
	}
}
