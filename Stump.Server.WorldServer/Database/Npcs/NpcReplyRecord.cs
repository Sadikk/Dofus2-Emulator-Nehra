using Stump.Core.Reflection;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.BaseServer.Database;
using Stump.Server.WorldServer.Database.Npcs.Replies;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Npcs;
using Stump.Server.WorldServer.Game.Conditions;

namespace Stump.Server.WorldServer.Database.Npcs
{
	[TableName("npcs_replies")]
	public class NpcReplyRecord : ParameterizableRecord, IAutoGeneratedRecord
	{
		private string m_criteria;
		private ConditionExpression m_criteriaExpression;
		private NpcMessage m_message;
		public int Id
		{
			get;
			set;
		}
		public string Type
		{
			get;
			set;
		}
		public int ReplyId
		{
			get;
			set;
		}
		public int MessageId
		{
			get;
			set;
		}
		[NullString]
		public string Criteria
		{
			get
			{
				return this.m_criteria;
			}
			set
			{
				this.m_criteria = value;
				this.m_criteriaExpression = null;
			}
		}
		[Ignore]
		public ConditionExpression CriteriaExpression
		{
			get
			{
				ConditionExpression result;
				if (string.IsNullOrEmpty(this.Criteria) || this.Criteria == "null")
				{
					result = null;
				}
				else
				{
					ConditionExpression arg_47_0;
					if ((arg_47_0 = this.m_criteriaExpression) == null)
					{
						arg_47_0 = (this.m_criteriaExpression = ConditionExpression.Parse(this.Criteria));
					}
					result = arg_47_0;
				}
				return result;
			}
			set
			{
				this.m_criteriaExpression = value;
				this.Criteria = value.ToString();
			}
		}
		public NpcMessage Message
		{
			get
			{
				NpcMessage arg_23_0;
				if ((arg_23_0 = this.m_message) == null)
				{
					arg_23_0 = (this.m_message = Singleton<NpcManager>.Instance.GetNpcMessage(this.MessageId));
				}
				return arg_23_0;
			}
			set
			{
				this.m_message = value;
				this.MessageId = value.Id;
			}
		}
		public NpcReply GenerateReply()
		{
			return Singleton<DiscriminatorManager<NpcReply>>.Instance.Generate<NpcReplyRecord>(this.Type, this);
		}
	}
}
