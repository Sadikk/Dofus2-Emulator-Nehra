using Stump.Core.Reflection;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Actors.Look;
using Stump.Server.WorldServer.Game.Maps;

namespace Stump.Server.WorldServer.Database.World
{
	[TableName("world_maps_merchant")]
	public sealed class WorldMapMerchantRecord : IAutoGeneratedRecord, ISaveIntercepter
	{
		private ActorLook m_entityLook;
		private string m_entityLookString;
		private Map m_map;
		[PrimaryKey("CharacterId", false)]
		public int CharacterId
		{
			get;
			set;
		}
		public int AccountId
		{
			get;
			set;
		}
		public int? MapId
		{
			get;
			set;
		}
		[Ignore]
		public Map Map
		{
			get
			{
				Map result;
				if (!this.MapId.HasValue)
				{
					result = null;
				}
				else
				{
					Map arg_3F_0;
					if ((arg_3F_0 = this.m_map) == null)
					{
                        arg_3F_0 = (this.m_map = Singleton<Game.World>.Instance.GetMap(this.MapId.Value));
					}
					result = arg_3F_0;
				}
				return result;
			}
			set
			{
				this.m_map = value;
				if (value == null)
				{
					this.MapId = null;
				}
				else
				{
					this.MapId = new int?(value.Id);
				}
			}
		}
		public int Cell
		{
			get;
			set;
		}
		public int Direction
		{
			get;
			set;
		}
		[Ignore]
		public ActorLook EntityLook
		{
			get
			{
				return this.m_entityLook;
			}
			set
			{
				this.m_entityLook = value;
				this.m_entityLookString = value.ToString();
			}
		}
		[NullString]
		public string EntityLookString
		{
			get
			{
				return this.m_entityLookString;
			}
			set
			{
				this.m_entityLookString = value;
				this.m_entityLook = ((!string.IsNullOrEmpty(this.EntityLookString)) ? ActorLook.Parse(this.m_entityLookString) : null);
			}
		}
		public string Name
		{
			get;
			set;
		}
		public int SellType
		{
			get;
			set;
		}
		public uint KamasEarned
		{
			get;
			set;
		}
		public bool IsActive
		{
			get;
			set;
		}
		public System.DateTime MerchantSince
		{
			get;
			set;
		}
		public void BeforeSave(bool insert)
		{
			this.m_entityLookString = this.m_entityLook.ToString();
		}
	}
}
