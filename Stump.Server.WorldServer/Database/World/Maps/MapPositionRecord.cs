using Stump.Core.Reflection;
using Stump.DofusProtocol.Classes;
using Stump.DofusProtocol.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;

namespace Stump.Server.WorldServer.Database.World.Maps
{
	[D2OClass("MapPosition", "com.ankamagames.dofus.datacenter.world", true), TableName("world_maps_positions")]
	public sealed class MapPositionRecord : IAutoGeneratedRecord, IAssignedByD2O
	{
		private string m_name;
		private System.Drawing.Point m_pos;
		[PrimaryKey("Id", false)]
		public int Id
		{
			get;
			set;
		}
		[Ignore]
		public MapRecord Map
		{
			get;
			set;
		}
		public int PosX
		{
			get
			{
				return this.m_pos.X;
			}
			set
			{
				this.m_pos.X = value;
			}
		}
		public int PosY
		{
			get
			{
				return this.m_pos.Y;
			}
			set
			{
				this.m_pos.Y = value;
			}
		}
		public System.Drawing.Point Pos
		{
			get
			{
				return new System.Drawing.Point(this.PosX, this.PosY);
			}
		}
		public bool Outdoor
		{
			get;
			set;
		}
		public int SubAreaId
		{
			get;
			set;
		}
		public int Capabilities
		{
			get;
			set;
		}
		public int WorldMap
		{
			get;
			set;
		}
		public int NameId
		{
			get;
			set;
		}
		public string Name
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_name) == null)
				{
					arg_23_0 = (this.m_name = Singleton<TextManager>.Instance.GetText(this.NameId));
				}
				return arg_23_0;
			}
		}
		public bool HasPriorityOnWorldmap
		{
			get;
			set;
		}
		public void AssignFields(object d2oObject)
		{
			MapPosition mapPosition = (MapPosition)d2oObject;
			this.Id = mapPosition.id;
			this.NameId = mapPosition.nameId;
			this.PosX = mapPosition.posX;
			this.PosY = mapPosition.posY;
			this.Outdoor = mapPosition.outdoor;
			this.SubAreaId = mapPosition.subAreaId;
			this.Capabilities = mapPosition.capabilities;
			this.WorldMap = mapPosition.worldMap;
			this.HasPriorityOnWorldmap = mapPosition.hasPriorityOnWorldmap;
		}
	}
}
