using Stump.Core.IO;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using System.Linq;
namespace Stump.Server.WorldServer.Database.World.Maps
{
	[TableName("world_maps")]
	public class MapRecord : IAutoGeneratedRecord, ISaveIntercepter
	{
		private short[] m_blueCells;
		private byte[] m_compressedCells;
		private byte[] m_compressedElements;
		private short[] m_redCells;
		[PrimaryKey("Id", false)]
		public int Id
		{
			get;
			set;
		}
		public uint Version
		{
			get;
			set;
		}
		public uint RelativeId
		{
			get;
			set;
		}
		public int MapType
		{
			get;
			set;
		}
		public int SubAreaId
		{
			get;
			set;
		}
		[Ignore]
		public MapPositionRecord Position
		{
			get;
			set;
		}
		[Ignore]
		public bool Outdoor
		{
			get
			{
				return this.Position != null && this.Position.Outdoor;
			}
			set
			{
				if (this.Position != null)
				{
					this.Position.Outdoor = value;
				}
			}
		}
		public int TopNeighbourId
		{
			get;
			set;
		}
		public int BottomNeighbourId
		{
			get;
			set;
		}
		public int LeftNeighbourId
		{
			get;
			set;
		}
		public int RightNeighbourId
		{
			get;
			set;
		}
		public int ClientTopNeighbourId
		{
			get;
			set;
		}
		public int ClientBottomNeighbourId
		{
			get;
			set;
		}
		public int ClientLeftNeighbourId
		{
			get;
			set;
		}
		public int ClientRightNeighbourId
		{
			get;
			set;
		}
		public int ShadowBonusOnEntities
		{
			get;
			set;
		}
		public bool UseLowpassFilter
		{
			get;
			set;
		}
		public bool UseReverb
		{
			get;
			set;
		}
		public int PresetId
		{
			get;
			set;
		}
		public byte[] BlueCellsBin
		{
			get;
			set;
		}
		public byte[] RedCellsBin
		{
			get;
			set;
		}
		[Ignore]
		public short[] BlueFightCells
		{
			get
			{
				short[] arg_2E_0;
				if (this.BlueCellsBin != null)
				{
					if ((arg_2E_0 = this.m_blueCells) == null)
					{
						arg_2E_0 = (this.m_blueCells = MapRecord.DeserializeFightCells(this.BlueCellsBin));
					}
				}
				else
				{
					arg_2E_0 = new short[0];
				}
				return arg_2E_0;
			}
			set
			{
				this.m_blueCells = value;
				this.BlueCellsBin = ((value != null) ? MapRecord.SerializeFightCells(value) : null);
			}
		}
		[Ignore]
		public short[] RedFightCells
		{
			get
			{
				short[] arg_2E_0;
				if (this.RedCellsBin != null)
				{
					if ((arg_2E_0 = this.m_redCells) == null)
					{
						arg_2E_0 = (this.m_redCells = MapRecord.DeserializeFightCells(this.RedCellsBin));
					}
				}
				else
				{
					arg_2E_0 = new short[0];
				}
				return arg_2E_0;
			}
			set
			{
				this.m_redCells = value;
				this.RedCellsBin = ((value != null) ? MapRecord.SerializeFightCells(value) : null);
			}
		}
		public byte[] CompressedCells
		{
			get
			{
				return this.m_compressedCells;
			}
			set
			{
				this.m_compressedCells = value;
				byte[] array = ZipHelper.Uncompress(this.m_compressedCells);
				this.Cells = new Cell[array.Length / 11];
				int i = 0;
				int num = 0;
				while (i < array.Length)
				{
					this.Cells[num] = new Cell();
					this.Cells[num].Deserialize(array, i);
					i += 11;
					num++;
				}
			}
		}
		public byte[] CompressedElements
		{
			get
			{
				return this.m_compressedElements;
			}
			set
			{
				this.m_compressedElements = value;
				byte[] array = ZipHelper.Uncompress(this.m_compressedElements);
				this.Elements = new MapElement[array.Length / 6];
				int i = 0;
				int num = 0;
				while (i < array.Length)
				{
					MapElement mapElement = default(MapElement);
					mapElement.Deserialize(array, i);
					this.Elements[num] = mapElement;
					i += 6;
					num++;
				}
			}
		}
		[Ignore]
		public MapElement[] Elements
		{
			get;
			set;
		}
		[Ignore]
		public Cell[] Cells
		{
			get;
			set;
		}

		public void BeforeSave(bool insert)
		{
			this.m_compressedCells = new byte[this.Cells.Length * 11];
			for (int i = 0; i < this.Cells.Length; i++)
			{
				System.Array.Copy(this.Cells[i].Serialize(), 0, this.m_compressedCells, i * 11, 11);
			}
			this.m_compressedCells = ZipHelper.Compress(this.m_compressedCells);
			this.m_compressedElements = new byte[this.Elements.Length * 6];
			for (int i = 0; i < this.Elements.Length; i++)
			{
				System.Array.Copy(this.Elements[i].Serialize(), 0, this.m_compressedElements, i * 6, 6);
			}
			this.m_compressedElements = ZipHelper.Compress(this.m_compressedElements);
		}
		public static byte[] SerializeFightCells(short[] cells)
		{
			byte[] array = new byte[cells.Length * 2];
			int i = 0;
			int num = 0;
			while (i < cells.Length)
			{
				array[num] = (byte)(((int)cells[i] & 65280) >> 8);
				array[num + 1] = (byte)(cells[i] & 255);
				i++;
				num += 2;
			}
			return array;
		}
		public static short[] DeserializeFightCells(byte[] bytes)
		{
			if (bytes.Length % 2 != 0)
			{
				throw new System.ArgumentException("bytes.Length % 2 != 0");
			}
			short[] array = new short[bytes.Length / 2];
			int i = 0;
			int num = 0;
			while (i < bytes.Length)
			{
				array[num] = (short)((int)bytes[i] << 8 | (int)bytes[i + 1]);
				i += 2;
				num++;
			}
			return array;
		}
		public MapElement[] FindMapElement(int id)
		{
			return (
				from entry in this.Elements
				where (ulong)entry.ElementId == (ulong)((long)id)
				select entry).ToArray<MapElement>();
		}
	}
}
