using Stump.Core.Reflection;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Monsters;

namespace Stump.Server.WorldServer.Database.Monsters
{
	[TableName("monsters_drops")]
	public class DroppableItem : IAutoGeneratedRecord
	{
		private MonsterTemplate m_template;
		public int Id
		{
			get;
			set;
		}
		public int MonsterOwnerId
		{
			get;
			set;
		}
		[Ignore]
		public MonsterTemplate MonsterOwner
		{
			get
			{
				MonsterTemplate arg_23_0;
				if ((arg_23_0 = this.m_template) == null)
				{
					arg_23_0 = (this.m_template = Singleton<MonsterManager>.Instance.GetTemplate(this.MonsterOwnerId));
				}
				return arg_23_0;
			}
			set
			{
				this.m_template = value;
				this.MonsterOwnerId = value.Id;
			}
		}
		public short ItemId
		{
			get;
			set;
		}
		[DefaultSetting(0)]
		public int DropLimit
		{
			get;
			set;
		}
		public double DropRateForGrade1
		{
			get;
			set;
		}
		public double DropRateForGrade2
		{
			get;
			set;
		}
		public double DropRateForGrade3
		{
			get;
			set;
		}
		public double DropRateForGrade4
		{
			get;
			set;
		}
		public double DropRateForGrade5
		{
			get;
			set;
		}
		[DefaultSetting(1)]
		public int RollsCounter
		{
			get;
			set;
		}
		[DefaultSetting(100)]
		public int ProspectingLock
		{
			get;
			set;
		}
		[NullString]
		public string Condition
		{
			get;
			set;
		}
		public void SetDropRate(double rate)
		{
			this.DropRateForGrade1 = rate;
			this.DropRateForGrade2 = rate;
			this.DropRateForGrade3 = rate;
			this.DropRateForGrade4 = rate;
			this.DropRateForGrade5 = rate;
		}
		public void SetDropRate(double min, double max)
		{
			if (min > max)
			{
				throw new System.ArgumentException("min > max");
			}
			double num = max - min / 4.0;
			this.DropRateForGrade1 = min;
			this.DropRateForGrade2 = min + num;
			this.DropRateForGrade3 = min + 2.0 * num;
			this.DropRateForGrade4 = min + 3.0 * num;
			this.DropRateForGrade5 = max;
		}
		public double GetDropRate(int grade)
		{
			double result;
			if (grade <= 1)
			{
				result = this.DropRateForGrade1;
			}
			else
			{
				if (grade == 2)
				{
					result = this.DropRateForGrade2;
				}
				else
				{
					if (grade == 3)
					{
						result = this.DropRateForGrade3;
					}
					else
					{
						if (grade == 4)
						{
							result = this.DropRateForGrade4;
						}
						else
						{
							result = this.DropRateForGrade5;
						}
					}
				}
			}
			return result;
		}
	}
}
