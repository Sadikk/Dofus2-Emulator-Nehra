using Stump.Core.Reflection;
using Stump.DofusProtocol.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Game.Actors.Look;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Monsters;

namespace Stump.Server.WorldServer.Database.Monsters
{
	[D2OClass("Monster", "com.ankamagames.dofus.datacenter.monsters", true), TableName("monsters_templates")]
	public sealed class MonsterTemplate : IAutoGeneratedRecord, IAssignedByD2O
	{
		private System.Collections.Generic.List<DroppableItem> m_droppableItems;
		private ActorLook m_entityLook;
		private System.Collections.Generic.List<MonsterGrade> m_grades;
		private string m_lookAsString;
		private string m_name;
		[PrimaryKey("Id", false)]
		public int Id
		{
			get;
			set;
		}
		public uint NameId
		{
			get;
			set;
		}
		public string Name
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_name) == null)
				{
					arg_23_0 = (this.m_name = Singleton<TextManager>.Instance.GetText(this.NameId));
				}
				return arg_23_0;
			}
		}
		public uint GfxId
		{
			get;
			set;
		}
		public int Race
		{
			get;
			set;
		}
		public int MinDroppedKamas
		{
			get;
			set;
		}
		public int MaxDroppedKamas
		{
			get;
			set;
		}
		[Ignore]
		public System.Collections.Generic.List<DroppableItem> DroppableItems
		{
			get
			{
				System.Collections.Generic.List<DroppableItem> arg_23_0;
				if ((arg_23_0 = this.m_droppableItems) == null)
				{
					arg_23_0 = (this.m_droppableItems = Singleton<MonsterManager>.Instance.GetMonsterDroppableItems(this.Id));
				}
				return arg_23_0;
			}
		}
		[Ignore]
		public System.Collections.Generic.List<MonsterGrade> Grades
		{
			get
			{
				System.Collections.Generic.List<MonsterGrade> arg_23_0;
				if ((arg_23_0 = this.m_grades) == null)
				{
					arg_23_0 = (this.m_grades = Singleton<MonsterManager>.Instance.GetMonsterGrades(this.Id));
				}
				return arg_23_0;
			}
		}
		public string LookAsString
		{
			get
			{
				string result;
				if (this.EntityLook == null)
				{
					result = string.Empty;
				}
				else
				{
					if (string.IsNullOrEmpty(this.m_lookAsString))
					{
						this.m_lookAsString = this.EntityLook.ToString();
					}
					result = this.m_lookAsString;
				}
				return result;
			}
			set
			{
				this.m_lookAsString = value;
				if (!string.IsNullOrEmpty(value) && value != "null")
				{
					this.m_entityLook = ActorLook.Parse(this.m_lookAsString);
				}
				else
				{
					this.m_entityLook = null;
				}
			}
		}
		[Ignore]
		public ActorLook EntityLook
		{
			get
			{
				return this.m_entityLook;
			}
			set
			{
				this.m_entityLook = value;
				if (value != null)
				{
					this.m_lookAsString = value.ToString();
				}
			}
		}
		public bool UseSummonSlot
		{
			get;
			set;
		}
		public bool UseBombSlot
		{
			get;
			set;
		}
		public bool CanPlay
		{
			get;
			set;
		}
		public bool CanTackle
		{
			get;
			set;
		}
		public bool IsBoss
		{
			get;
			set;
		}
		public bool IsActive
		{
			get;
			set;
		}
		public void AssignFields(object d2oObject)
		{
			Stump.DofusProtocol.Classes.Monster monster = (Stump.DofusProtocol.Classes.Monster)d2oObject;
			this.Id = monster.id;
			this.NameId = monster.nameId;
			this.GfxId = monster.gfxId;
			this.Race = monster.race;
			this.LookAsString = monster.look;
			this.UseSummonSlot = monster.useSummonSlot;
			this.UseBombSlot = monster.useBombSlot;
			this.CanPlay = monster.canPlay;
			this.CanTackle = monster.canTackle;
			this.IsBoss = monster.isBoss;
			this.IsActive = true;
		}
	}
}
