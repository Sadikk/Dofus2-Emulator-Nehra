using ServiceStack.Text;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Tools.D2o;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Actors.RolePlay.Monsters;
using System.Linq;
namespace Stump.Server.WorldServer.Database.Monsters
{
	[D2OClass("MonsterGrade", "com.ankamagames.dofus.datacenter.monsters", true), TableName("monsters_grades")]
	public class MonsterGrade : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
	{
		private System.Collections.Generic.List<MonsterSpell> m_spellsTemplates;
		private string m_statsJSON;
		private MonsterTemplate m_template;
		private int m_wisdom;
		private System.Collections.Generic.List<Stump.Server.WorldServer.Game.Spells.Spell> m_spells;

		public int Id
		{
			get;
			set;
		}
		public uint GradeId
		{
			get;
			set;
		}
		public int GradeXp
		{
			get;
			set;
		}
		public int MonsterId
		{
			get;
			set;
		}
		[Ignore]
		public MonsterTemplate Template
		{
			get
			{
				MonsterTemplate arg_23_0;
				if ((arg_23_0 = this.m_template) == null)
				{
					arg_23_0 = (this.m_template = Singleton<MonsterManager>.Instance.GetTemplate(this.MonsterId));
				}
				return arg_23_0;
			}
			set
			{
				this.m_template = value;
				this.MonsterId = value.Id;
			}
		}
		public uint Level
		{
			get;
			set;
		}
		public int PaDodge
		{
			get;
			set;
		}
		public int PmDodge
		{
			get;
			set;
		}
		public int EarthResistance
		{
			get;
			set;
		}
		public int AirResistance
		{
			get;
			set;
		}
		public int FireResistance
		{
			get;
			set;
		}
		public int WaterResistance
		{
			get;
			set;
		}
		public int NeutralResistance
		{
			get;
			set;
		}
		public int LifePoints
		{
			get;
			set;
		}
		public int ActionPoints
		{
			get;
			set;
		}
		public int MovementPoints
		{
			get;
			set;
		}
		public short TackleEvade
		{
			get;
			set;
		}
		public short TackleBlock
		{
			get;
			set;
		}
		public short Strength
		{
			get;
			set;
		}
		public short Chance
		{
			get;
			set;
		}
		public short Vitality
		{
			get;
			set;
		}
		public short Wisdom
		{
			get
			{
				return (short)this.m_wisdom;
			}
			set
			{
				this.m_wisdom = (int)value;
			}
		}
		public short Intelligence
		{
			get;
			set;
		}
		public short Agility
		{
			get;
			set;
		}
		public string StatsJSON
		{
			get
			{
				return this.m_statsJSON;
			}
			set
			{
				this.m_statsJSON = value;
				this.Stats = ((value == null) ? new System.Collections.Generic.Dictionary<PlayerFields, short>() : value.FromJson<System.Collections.Generic.Dictionary<PlayerFields, short>>());
			}
		}
		[Ignore]
		public System.Collections.Generic.Dictionary<PlayerFields, short> Stats
		{
			get;
			set;
		}
		public System.Collections.Generic.List<MonsterSpell> SpellsTemplates
		{
			get
			{
				System.Collections.Generic.List<MonsterSpell> arg_23_0;
				if ((arg_23_0 = this.m_spellsTemplates) == null)
				{
					arg_23_0 = (this.m_spellsTemplates = Singleton<MonsterManager>.Instance.GetMonsterGradeSpells(this.Id));
				}
				return arg_23_0;
			}
		}
		public System.Collections.Generic.List<Stump.Server.WorldServer.Game.Spells.Spell> Spells
		{
			get
			{
				System.Collections.Generic.List<Stump.Server.WorldServer.Game.Spells.Spell> arg_40_0;
				if ((arg_40_0 = this.m_spells) == null)
				{
					arg_40_0 = (this.m_spells = (
						from entry in this.SpellsTemplates
						select new Stump.Server.WorldServer.Game.Spells.Spell(entry)).ToList<Stump.Server.WorldServer.Game.Spells.Spell>());
				}
				return arg_40_0;
			}
		}
		public MonsterGrade()
		{
			this.Stats = new System.Collections.Generic.Dictionary<PlayerFields, short>();
		}
		public void ReloadSpells()
		{
			this.m_spells = null;
		}
		public void AssignFields(object d2oObject)
		{
			Stump.DofusProtocol.Classes.MonsterGrade monsterGrade = (Stump.DofusProtocol.Classes.MonsterGrade)d2oObject;
			this.GradeId = monsterGrade.grade;
			this.GradeXp = monsterGrade.gradeXp;
			this.MonsterId = monsterGrade.monsterId;
			this.Level = monsterGrade.level;
			this.PaDodge = monsterGrade.paDodge;
			this.PmDodge = monsterGrade.pmDodge;
			this.EarthResistance = monsterGrade.earthResistance;
			this.AirResistance = monsterGrade.airResistance;
			this.FireResistance = monsterGrade.fireResistance;
			this.WaterResistance = monsterGrade.waterResistance;
			this.NeutralResistance = monsterGrade.neutralResistance;
			this.LifePoints = monsterGrade.lifePoints;
			this.ActionPoints = monsterGrade.actionPoints;
			this.MovementPoints = monsterGrade.movementPoints;
			this.Wisdom = (short)monsterGrade.wisdom;
		}
		public void BeforeSave(bool insert)
		{
			this.m_statsJSON = this.Stats.ToJson<System.Collections.Generic.Dictionary<PlayerFields, short>>();
		}
	}
}
