using Stump.Core.Reflection;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Maps;
using Stump.Server.WorldServer.Game.Maps.Cells;

namespace Stump.Server.WorldServer.Database.Monsters
{
	[TableName("monsters_spawns_dungeons")]
	public class MonsterDungeonSpawn : IAutoGeneratedRecord
	{
        // FIELDS
		private Map m_map;
		private Map m_teleportMap;

        // PROPERTIES
		public int Id
		{
			get;
			set;
		}
		public int MapId
		{
			get;
			set;
		}
		[Ignore]
		public Map Map
		{
			get
			{
				Map arg_23_0;
				if ((arg_23_0 = this.m_map) == null)
				{
					arg_23_0 = (this.m_map = Singleton<Game.World>.Instance.GetMap(this.MapId));
				}
				return arg_23_0;
			}
			set
			{
				this.m_map = value;
				this.MapId = value.Id;
			}
		}
        [Ignore]
        public System.Collections.Generic.List<MonsterDungeonSpawnEntity> GroupMonsters
        {
            get;
            set;
        }
		public bool TeleportEvent
		{
			get;
			set;
		}
		public int TeleportMapId
		{
			get;
			set;
		}
		[Ignore]
		public Map TeleportMap
		{
			get
			{
				Map arg_23_0;
				if ((arg_23_0 = this.m_teleportMap) == null)
				{
                    arg_23_0 = (this.m_teleportMap = Singleton<Game.World>.Instance.GetMap(this.TeleportMapId));
				}
				return arg_23_0;
			}
			set
			{
				this.m_teleportMap = value;
				this.TeleportMapId = value.Id;
			}
		}
		public short TeleportCell
		{
			get;
			set;
		}
		public DirectionsEnum TeleportDirection
		{
			get;
			set;
		}

        // CONSTRUCTORS
		public MonsterDungeonSpawn()
		{
            this.GroupMonsters = new System.Collections.Generic.List<MonsterDungeonSpawnEntity>();
		}

        // METHODS
		public ObjectPosition GetTeleportPosition()
		{
			return (!this.TeleportEvent) ? null : new ObjectPosition(this.TeleportMap, this.TeleportCell, this.TeleportDirection);
		}
	}
}
