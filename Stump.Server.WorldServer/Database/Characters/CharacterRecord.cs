using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.Breeds;
using Stump.Server.WorldServer.Game.Achievements;
using Stump.Server.WorldServer.Game.Actors.Look;
using Stump.Server.WorldServer.Game.Maps;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Stump.Server.WorldServer.Database.Characters
{
	[TableName("characters")]
	public class CharacterRecord : IAutoGeneratedRecord, ISaveIntercepter
	{
        // FIELDS
		private ActorLook m_entityLook;
		private string m_customEntityLookString;
		private string m_entityLookString;
		private byte[] m_knownZaapsBin;
		private int? m_spawnMapId;
		private ushort m_honor;
		private ActorLook m_customEntityLook;
		private string m_customLookAsString;
		private List<Map> m_knownZaaps = new List<Map>();
		private Map m_spawnMap;
		private List<ushort> m_titles = new List<ushort>();
		private string m_titlesCSV;
		private List<ushort> m_ornaments = new List<ushort>();
		private string m_ornamentsCSV;
        private List<ushort> m_finishedAchievements = new List<ushort>();
        private string m_finishedAchievementsCSV;
        private List<uint> m_finishedAchievementObjectives = new List<uint>();
        private string m_finishedAchievementObjectivesCSV;
        private Dictionary<int, int> m_runningAchievementObjectives;
        private string m_runningAchievementObjectivesCSV;
        private List<PlayerAchievementReward> m_rewards = new List<PlayerAchievementReward>();
        private byte[] m_rewardsBin;

        // PROPERTIES
		public int Id
		{
			get;
			set;
		}
		public System.DateTime CreationDate
		{
			get;
			set;
		}
		public System.DateTime? LastUsage
		{
			get;
			set;
		}
		public string Name
		{
			get;
			set;
		}
		public PlayableBreedEnum Breed
		{
			get;
			set;
		}
        public SexTypeEnum Sex
		{
			get;
			set;
		}
		public int Head
		{
			get;
			set;
		}
		[NullString]
		public string EntityLookString
		{
			get
			{
				return this.m_entityLookString;
			}
			set
			{
				this.m_entityLookString = value;
				this.m_entityLook = ((!string.IsNullOrEmpty(this.EntityLookString)) ? ActorLook.Parse(this.m_entityLookString) : null);
			}
		}
		[NullString]
		public string CustomEntityLookString
		{
			get
			{
				return this.m_customEntityLookString;
			}
			set
			{
				this.m_customEntityLookString = value;
				this.m_customEntityLook = ((!string.IsNullOrEmpty(this.m_customEntityLookString)) ? ActorLook.Parse(this.m_customEntityLookString) : null);
			}
		}
		public bool CustomLookActivated
		{
			get;
			set;
		}
		public ushort? TitleId
		{
			get;
			set;
		}
		public string TitleParam
		{
			get;
			set;
		}
		[Ignore]
		public System.Collections.Generic.List<ushort> Titles
		{
			get
			{
				return this.m_titles;
			}
			set
			{
				this.m_titles = value;
				this.m_titlesCSV = this.m_titles.ToCSV(",");
			}
		}
		[NullString]
		public string TitlesCSV
		{
			get
			{
				return this.m_titlesCSV;
			}
			set
			{
				this.m_titlesCSV = value;
                this.m_titles = ((!string.IsNullOrEmpty(this.m_titlesCSV)) ? this.m_titlesCSV.FromCSV<ushort>(",").ToList<ushort>() : new System.Collections.Generic.List<ushort>());
			}
		}
		public ushort? Ornament
		{
			get;
			set;
		}
		[Ignore]
        public System.Collections.Generic.List<ushort> Ornaments
		{
			get
			{
				return this.m_ornaments;
			}
			set
			{
				this.m_ornaments = value;
				this.m_ornamentsCSV = this.m_ornaments.ToCSV(",");
			}
		}
		[NullString]
		public string OrnamentsCSV
		{
			get
			{
				return this.m_ornamentsCSV;
			}
			set
			{
				this.m_ornamentsCSV = value;
                this.m_ornaments = ((!string.IsNullOrEmpty(this.m_ornamentsCSV)) ? this.m_ornamentsCSV.FromCSV<ushort>(",").ToList<ushort>() : new System.Collections.Generic.List<ushort>());
			}
		}
        [Ignore]
        public List<ushort> FinishedAchievements
        {
            get
            {
                return this.m_finishedAchievements;
            }
            set
            {
                this.m_finishedAchievements = value;
                this.m_finishedAchievementsCSV = this.m_finishedAchievements.ToCSV(",");
            }
        }
        public string FinishedAchievementsCSV
        {
            get
            {
                return this.m_finishedAchievementsCSV;
            }
            set
            {
                this.m_finishedAchievementsCSV = value;
                this.m_finishedAchievements = ((!string.IsNullOrEmpty(value)) ? value.FromCSV<ushort>(",").ToList<ushort>() : new List<ushort>());
            }
        }
        [Ignore]
        public List<uint> FinishedAchievementObjectives
        {
            get
            {
                return this.m_finishedAchievementObjectives;
            }
            set
            {
                this.m_finishedAchievementObjectives = value;
                this.m_finishedAchievementObjectivesCSV = this.m_finishedAchievementObjectives.ToCSV(",");
            }
        }
        public string FinishedAchievementObjectivesCSV
        {
            get
            {
                return this.m_finishedAchievementObjectivesCSV;
            }
            set
            {
                this.m_finishedAchievementObjectivesCSV = value;
                this.m_finishedAchievementObjectives = ((!string.IsNullOrEmpty(value)) ? value.FromCSV<uint>(",").ToList<uint>() : new List<uint>());
            }
        }
        [Ignore]
        public Dictionary<int, int> RunningAchievementObjectives
        {
            get
            {
                return this.m_runningAchievementObjectives;
            }
            set
            {
                this.m_runningAchievementObjectives = value;
                this.m_runningAchievementObjectivesCSV = this.m_runningAchievementObjectives.Select(entry => string.Format("{0},{1}", entry.Key, entry.Value)).ToCSV(";");
            }
        }
        public string RunningAchievementObjectivesCSV
        {
            get
            {
                return this.m_runningAchievementObjectivesCSV;
            }
            set
            {
                this.m_runningAchievementObjectivesCSV = value;
                this.m_runningAchievementObjectives = new Dictionary<int, int>();
                foreach (var item in this.m_runningAchievementObjectivesCSV.FromCSV<string>(";"))
                {
                    var pair = item.FromCSV<int>(",");

                    this.m_runningAchievementObjectives.Add(pair[0], pair[1]);
                }
            }
        }
        [Ignore]
        public List<PlayerAchievementReward> AchievementRewards
        {
            get
            {
                return this.m_rewards;
            }
            set
            {
                this.m_rewards = value;
                this.m_rewardsBin = (value == null ? null : value.ToBinary());
            }
        }
        public byte[] AchievementRewardsBin
        {
            get
            {
                return this.m_rewardsBin;
            }
            set
            {
                this.m_rewardsBin = value;
                this.m_rewards = (value == null ? new List<PlayerAchievementReward>() : value.ToObject<List<PlayerAchievementReward>>());
            }
        }
        public int AchievementPoints
        {
            get;
            set;
        }
		public bool HasRecolor
		{
			get;
			set;
		}
		public bool HasRename
		{
			get;
			set;
		}
		public bool CantBeAggressed
		{
			get;
			set;
		}
		public bool CantBeChallenged
		{
			get;
			set;
		}
		public bool CantTrade
		{
			get;
			set;
		}
		public bool CantBeAttackedByMutant
		{
			get;
			set;
		}
		public bool CantRun
		{
			get;
			set;
		}
		public bool ForceSlowWalk
		{
			get;
			set;
		}
		public bool CantMinimize
		{
			get;
			set;
		}
		public bool CantMove
		{
			get;
			set;
		}
		public bool CantAggress
		{
			get;
			set;
		}
		public bool CantChallenge
		{
			get;
			set;
		}
		public bool CantExchange
		{
			get;
			set;
		}
		public bool CantAttack
		{
			get;
			set;
		}
		public bool CantChat
		{
			get;
			set;
		}
		public bool CantBeMerchant
		{
			get;
			set;
		}
		public bool CantUseObject
		{
			get;
			set;
		}
		public bool CantUseTaxCollector
		{
			get;
			set;
		}
		public bool CantUseInteractive
		{
			get;
			set;
		}
		public bool CantSpeakToNpc
		{
			get;
			set;
		}
		public bool CantChangeZone
		{
			get;
			set;
		}
		public bool CantAttackMonster
		{
			get;
			set;
		}
		public bool CantWalk8Directions
		{
			get;
			set;
		}
		public int MapId
		{
			get;
			set;
		}
		public short CellId
		{
			get;
			set;
		}
		public DirectionsEnum Direction
		{
			get;
			set;
		}
		public int BaseHealth
		{
			get;
			set;
		}
		public int DamageTaken
		{
			get;
			set;
		}
		public int AP
		{
			get;
			set;
		}
		public int MP
		{
			get;
			set;
		}
		public int Prospection
		{
			get;
			set;
		}
		public int Strength
		{
			get;
			set;
		}
		public int Chance
		{
			get;
			set;
		}
		public int Vitality
		{
			get;
			set;
		}
		public int Wisdom
		{
			get;
			set;
		}
		public int Intelligence
		{
			get;
			set;
		}
		public int Agility
		{
			get;
			set;
		}
		public short PermanentAddedStrength
		{
			get;
			set;
		}
		public short PermanentAddedChance
		{
			get;
			set;
		}
		public short PermanentAddedVitality
		{
			get;
			set;
		}
		public short PermanentAddedWisdom
		{
			get;
			set;
		}
		public short PermanentAddedIntelligence
		{
			get;
			set;
		}
		public short PermanentAddedAgility
		{
			get;
			set;
		}
		public int Kamas
		{
			get;
			set;
		}
		public bool CanRestat
		{
			get;
			set;
		}
		public long Experience
		{
			get;
			set;
		}
		public short EnergyMax
		{
			get;
			set;
		}
		public short Energy
		{
			get;
			set;
		}
		public ushort StatsPoints
		{
			get;
			set;
		}
		public ushort SpellsPoints
		{
			get;
			set;
		}
		public AlignmentSideEnum AlignmentSide
		{
			get;
			set;
		}
		public sbyte AlignmentValue
		{
			get;
			set;
		}
		public ushort Honor
		{
			get
			{
				return this.m_honor;
			}
			set
			{
				this.m_honor =  Convert.ToUInt16((value > 17500) ? 17500 : value);
			}
		}
		public ushort Dishonor
		{
			get;
			set;
		}
		public bool PvPEnabled
		{
			get;
			set;
		}
		public int? SpawnMapId
		{
			get
			{
				return this.m_spawnMapId;
			}
			set
			{
				this.m_spawnMapId = value;
				this.m_spawnMap = null;
			}
		}
		public bool WarnOnConnection
		{
			get;
			set;
		}
		public bool WarnOnGuildConnection
		{
			get;
			set;
		}
		public bool WarnOnLevel
		{
			get;
			set;
		}
		public System.DateTime? MuteUntil
		{
			get;
			set;
		}
        public short HiddenArenaRank
        {
            get;
            set;
        }
        public short ArenaRank
        {
            get;
            set;
        }
        public short BestDailyArenaRank
        {
            get;
            set;
        }
        public short BestArenaRank
        {
            get;
            set;
        }
        public short ArenaFightCount
        {
            get;
            set;
        }
        public short ArenaVictoryCount
        {
            get;
            set;
        }
		public bool Rename
		{
			get;
			set;
		}
		public bool Recolor
		{
			get;
			set;
		}
		public bool Relook
		{
			get;
			set;
		}
		public int? LeftFightId
		{
			get;
			set;
		}
		[Ignore]
		public ActorLook EntityLook
		{
			get
			{
				return this.m_entityLook;
			}
			set
			{
				this.m_entityLook = value;
				this.m_entityLookString = ((value != null) ? value.ToString() : string.Empty);
			}
		}
		[Ignore]
		public ActorLook CustomEntityLook
		{
			get
			{
				return this.m_customEntityLook;
			}
			set
			{
				this.m_customEntityLook = value;
				this.m_customEntityLookString = ((value != null) ? value.ToString() : string.Empty);
			}
		}
		[Ignore]
		public System.Collections.Generic.List<Map> KnownZaaps
		{
			get
			{
				return this.m_knownZaaps;
			}
			set
			{
				this.m_knownZaaps = value;
				this.m_knownZaapsBin = CharacterRecord.SerializeZaaps(this.m_knownZaaps);
			}
		}
		public byte[] KnownZaapsBin
		{
			get
			{
				return this.m_knownZaapsBin;
			}
			set
			{
				this.m_knownZaapsBin = value;
				this.m_knownZaaps = CharacterRecord.UnSerializeZaaps(this.KnownZaapsBin);
			}
		}
		[Ignore]
		public Map SpawnMap
		{
			get
			{
				Map result;
				if (!this.SpawnMapId.HasValue)
				{
					result = null;
				}
				else
				{
					Map arg_3F_0;
					if ((arg_3F_0 = this.m_spawnMap) == null)
					{
                        arg_3F_0 = (this.m_spawnMap = Singleton<Game.World>.Instance.GetMap(this.SpawnMapId.Value));
					}
					result = arg_3F_0;
				}
				return result;
			}
			set
			{
				this.m_spawnMap = value;
				if (value == null)
				{
					this.SpawnMapId = null;
				}
				else
				{
					this.SpawnMapId = new int?(value.Id);
				}
			}
		}

        // CONSTRUCTORS
		public CharacterRecord()
		{
			this.TitleParam = string.Empty;
            this.m_runningAchievementObjectives = new Dictionary<int, int>();
		}
		public CharacterRecord(Breed breed) : this()
		{
			this.Breed = (PlayableBreedEnum)breed.Id;
			this.BaseHealth = (int)((ushort)(breed.StartHealthPoint + (int)(breed.StartLevel * 5)));
			this.AP = breed.StartActionPoints;
			this.MP = breed.StartMovementPoints;
			this.Prospection = breed.StartProspection;
			this.SpellsPoints = breed.StartSpellsPoints;
			this.StatsPoints = breed.StartStatsPoints;
			this.Strength = (int)breed.StartStrength;
			this.Vitality = (int)breed.StartVitality;
			this.Wisdom = (int)breed.StartWisdom;
			this.Chance = (int)breed.StartChance;
			this.Intelligence = (int)breed.StartIntelligence;
			this.Agility = (int)breed.StartAgility;
			this.MapId = breed.StartMap;
			this.CellId = breed.StartCell;
			this.Direction = breed.StartDirection;
			this.SpellsPoints = (ushort)breed.StartLevel;
			this.StatsPoints = (ushort)(breed.StartLevel * 5);
			this.Kamas = breed.StartKamas;
			this.CanRestat = true;
			if (breed.StartLevel > 100)
			{
				this.AP++;
			}
		}
		
        // METHODS
        private static byte[] SerializeZaaps(IReadOnlyList<Map> knownZaaps)
		{
			byte[] array = new byte[knownZaaps.Count * 4];
			for (int i = 0; i < knownZaaps.Count; i++)
			{
				array[i * 4] = (byte)(knownZaaps[i].Id >> 24);
				array[i * 4 + 1] = (byte)(knownZaaps[i].Id >> 16 & 255);
				array[i * 4 + 2] = (byte)(knownZaaps[i].Id >> 8 & 255);
				array[i * 4 + 3] = (byte)(knownZaaps[i].Id & 255);
			}
			return array;
		}
		private static System.Collections.Generic.List<Map> UnSerializeZaaps(System.Collections.Generic.IList<byte> serialized)
		{
			System.Collections.Generic.List<Map> list = new System.Collections.Generic.List<Map>();
			for (int i = 0; i < serialized.Count; i += 4)
			{
				int num = (int)serialized[i] << 24 | (int)serialized[i + 1] << 16 | (int)serialized[i + 2] << 8 | (int)serialized[i + 3];
                Map map = Singleton<Game.World>.Instance.GetMap(num);
				if (map == null)
				{
					throw new System.Exception("Map " + num + " not found");
				}
				list.Add(map);
			}
			return list;
		}

		public void BeforeSave(bool insert)
		{
			this.m_knownZaapsBin = CharacterRecord.SerializeZaaps(this.m_knownZaaps);
			this.m_customEntityLookString = ((this.m_customEntityLook == null) ? null : this.m_customEntityLook.ToString());
            this.m_entityLookString = ((this.m_entityLook == null) ? null : this.m_entityLook.ToString());
            this.m_finishedAchievementsCSV = this.m_finishedAchievements.ToCSV(",");
            this.m_finishedAchievementObjectivesCSV = this.m_finishedAchievementObjectives.ToCSV(",");
            this.m_rewardsBin = (this.m_rewards == null ? null : this.m_rewards.ToBinary());
            this.m_ornamentsCSV = this.m_ornaments.ToCSV(",");
            this.m_titlesCSV = this.m_titles.ToCSV(",");
		}
	}
}
