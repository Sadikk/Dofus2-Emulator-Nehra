using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Classes;
using Stump.DofusProtocol.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;

namespace Stump.Server.WorldServer.Database.Spells
{
	[D2OClass("Spell", "com.ankamagames.dofus.datacenter.spells", true), TableName("spells_templates")]
	public sealed class SpellTemplate : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
	{
		private string m_description;
		private string m_name;
		private string m_spellLevelsIdsCSV;
		[PrimaryKey("Id", false)]
		public int Id
		{
			get;
			set;
		}
		public uint NameId
		{
			get;
			set;
		}
		public string Name
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_name) == null)
				{
					arg_23_0 = (this.m_name = Singleton<TextManager>.Instance.GetText(this.NameId));
				}
				return arg_23_0;
			}
		}
		public uint DescriptionId
		{
			get;
			set;
		}
		public string Description
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_description) == null)
				{
					arg_23_0 = (this.m_description = Singleton<TextManager>.Instance.GetText(this.DescriptionId));
				}
				return arg_23_0;
			}
		}
		public uint TypeId
		{
			get;
			set;
		}
		public string ScriptParams
		{
			get;
			set;
		}
		public string ScriptParamsCritical
		{
			get;
			set;
		}
		public int ScriptId
		{
			get;
			set;
		}
		public int ScriptIdCritical
		{
			get;
			set;
		}
		public int IconId
		{
			get;
			set;
		}
		public string SpellLevelsIdsCSV
		{
			get
			{
				return this.m_spellLevelsIdsCSV;
			}
			set
			{
				this.m_spellLevelsIdsCSV = value;
                this.SpellLevelsIds = value.FromCSV<uint>(",");
			}
		}
		[Ignore]
		public uint[] SpellLevelsIds
		{
			get;
			set;
		}
		public bool UseParamCache
		{
			get;
			set;
		}
		public void AssignFields(object d2oObject)
		{
			Spell spell = (Spell)d2oObject;
			this.Id = spell.id;
			this.NameId = spell.nameId;
			this.DescriptionId = spell.descriptionId;
			this.TypeId = spell.typeId;
			this.ScriptParams = spell.scriptParams ?? "";
			this.ScriptParamsCritical = spell.scriptParamsCritical ?? "";
			this.ScriptId = spell.scriptId;
			this.ScriptIdCritical = spell.scriptIdCritical;
			this.IconId = spell.iconId;
			this.SpellLevelsIds = spell.spellLevels.ToArray();
			this.UseParamCache = spell.useParamCache;
		}
		public void BeforeSave(bool insert)
		{
			this.m_spellLevelsIdsCSV = this.SpellLevelsIds.ToCSV(",");
		}
		public override string ToString()
		{
			return string.Format("{0} - {1}", this.Id, this.Name);
		}
	}
}
