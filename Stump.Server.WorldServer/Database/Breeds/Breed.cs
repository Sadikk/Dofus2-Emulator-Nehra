using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Tools.D2o;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Game.Actors.Look;
using Stump.Server.WorldServer.Game.Maps.Cells;
using System.Linq;
namespace Stump.Server.WorldServer.Database.Breeds
{
	[D2OClass("Breed", "com.ankamagames.dofus.datacenter.breeds", true), TableName("breeds")]
	public class Breed : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
	{
		private string m_breedSpellsIdCSV;
		private string m_femaleColorsCSV;
		private string m_femaleLookString;
		private string m_maleColorsCSV;
		private string m_maleLookString;
		private string m_statsPointsForAgilityCSV;
		private string m_statsPointsForChanceCSV;
		private string m_statsPointsForIntelligenceCSV;
		private string m_statsPointsForStrengthCSV;
		private string m_statsPointsForVitalityCSV;
		private string m_statsPointsForWisdomCSV;
		private uint[] m_breedSpellsId;
		private uint[] m_femaleColors;
		private ActorLook m_femaleLook;
		private string m_longName;
		private uint[] m_maleColors;
		private ActorLook m_maleLook;
		private string m_shortName;
		private ObjectPosition m_startPosition;
		private uint[][] m_statsPointsForAgility;
		private uint[][] m_statsPointsForChance;
		private uint[][] m_statsPointsForIntelligence;
		private uint[][] m_statsPointsForStrength;
		private uint[][] m_statsPointsForVitality;
		private uint[][] m_statsPointsForWisdom;
		[PrimaryKey("Id", false)]
		public int Id
		{
			get;
			set;
		}
		public int GameplayDescriptionId
		{
			get;
			set;
		}
		public int ShortNameId
		{
			get;
			set;
		}
		public int LongNameId
		{
			get;
			set;
		}
		public int DescriptionId
		{
			get;
			set;
		}
		public string MaleLookString
		{
			get
			{
				return this.m_maleLookString;
			}
			set
			{
				this.m_maleLookString = value;
				this.m_maleLook = ActorLook.Parse(this.MaleLookString);
			}
		}
		public string FemaleLookString
		{
			get
			{
				return this.m_femaleLookString;
			}
			set
			{
				this.m_femaleLookString = value;
				this.m_femaleLook = ActorLook.Parse(this.FemaleLookString);
			}
		}
		public long CreatureBonesId
		{
			get;
			set;
		}
		public int MaleArtwork
		{
			get;
			set;
		}
		public int FemaleArtwork
		{
			get;
			set;
		}
		public string StatsPointsForStrengthCSV
		{
			get
			{
				return this.m_statsPointsForStrengthCSV;
			}
			set
			{
				this.m_statsPointsForStrengthCSV = value;
                this.m_statsPointsForStrength = this.StatsPointsForStrengthCSV.FromCSV("|", (string x) => x.FromCSV<uint>(","));
			}
		}
		public string StatsPointsForIntelligenceCSV
		{
			get
			{
				return this.m_statsPointsForIntelligenceCSV;
			}
			set
			{
				this.m_statsPointsForIntelligenceCSV = value;
                this.m_statsPointsForIntelligence = this.StatsPointsForIntelligenceCSV.FromCSV("|", (string x) => x.FromCSV<uint>(","));
			}
		}
		public string StatsPointsForChanceCSV
		{
			get
			{
				return this.m_statsPointsForChanceCSV;
			}
			set
			{
				this.m_statsPointsForChanceCSV = value;
                this.m_statsPointsForChance = this.StatsPointsForChanceCSV.FromCSV("|", (string x) => x.FromCSV<uint>(","));
			}
		}
		public string StatsPointsForAgilityCSV
		{
			get
			{
				return this.m_statsPointsForAgilityCSV;
			}
			set
			{
				this.m_statsPointsForAgilityCSV = value;
                this.m_statsPointsForAgility = this.StatsPointsForAgilityCSV.FromCSV("|", (string x) => x.FromCSV<uint>(","));
			}
		}
		public string MaleColorsCSV
		{
			get
			{
				return this.m_maleColorsCSV;
			}
			set
			{
				this.m_maleColorsCSV = value;
                this.m_maleColors = this.MaleColorsCSV.FromCSV<uint>(",");
			}
		}
		public string StatsPointsForVitalityCSV
		{
			get
			{
				return this.m_statsPointsForVitalityCSV;
			}
			set
			{
				this.m_statsPointsForVitalityCSV = value;
                this.m_statsPointsForVitality = this.StatsPointsForVitalityCSV.FromCSV("|", (string x) => x.FromCSV<uint>(","));
			}
		}
		public string StatsPointsForWisdomCSV
		{
			get
			{
				return this.m_statsPointsForWisdomCSV;
			}
			set
			{
				this.m_statsPointsForWisdomCSV = value;
                this.m_statsPointsForWisdom = this.StatsPointsForWisdomCSV.FromCSV("|", (string x) => x.FromCSV<uint>(","));
			}
		}
		public string BreedSpellsIdCSV
		{
			get
			{
				return this.m_breedSpellsIdCSV;
			}
			set
			{
				this.m_breedSpellsIdCSV = value;
                this.m_breedSpellsId = this.BreedSpellsIdCSV.FromCSV<uint>(",");
			}
		}
		public string FemaleColorsCSV
		{
			get
			{
				return this.m_femaleColorsCSV;
			}
			set
			{
				this.m_femaleColorsCSV = value;
                this.m_femaleColors = this.FemaleColorsCSV.FromCSV<uint>(",");
			}
		}
		public int StartMap
		{
			get;
			set;
		}
		public short StartCell
		{
			get;
			set;
		}
		public DirectionsEnum StartDirection
		{
			get;
			set;
		}
		public int StartActionPoints
		{
			get;
			set;
		}
		public int StartMovementPoints
		{
			get;
			set;
		}
		public int StartHealthPoint
		{
			get;
			set;
		}
		public int StartProspection
		{
			get;
			set;
		}
		public ushort StartStatsPoints
		{
			get;
			set;
		}
		public ushort StartSpellsPoints
		{
			get;
			set;
		}
		public short StartStrength
		{
			get;
			set;
		}
		public short StartVitality
		{
			get;
			set;
		}
		public short StartWisdom
		{
			get;
			set;
		}
		public short StartIntelligence
		{
			get;
			set;
		}
		public short StartChance
		{
			get;
			set;
		}
		public short StartAgility
		{
			get;
			set;
		}
		public byte StartLevel
		{
			get;
			set;
		}
		public int StartKamas
		{
			get;
			set;
		}
		[Ignore]
		public System.Collections.Generic.List<BreedItem> Items
		{
			get;
			set;
		}
		[Ignore]
		public System.Collections.Generic.List<BreedSpell> Spells
		{
			get;
			set;
		}
		[Ignore]
		public string ShortName
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_shortName) == null)
				{
					arg_23_0 = (this.m_shortName = Singleton<TextManager>.Instance.GetText(this.ShortNameId));
				}
				return arg_23_0;
			}
		}
		[Ignore]
		public string LongName
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_longName) == null)
				{
					arg_23_0 = (this.m_longName = Singleton<TextManager>.Instance.GetText(this.LongNameId));
				}
				return arg_23_0;
			}
		}
		[Ignore]
		public ActorLook MaleLook
		{
			get
			{
				ActorLook arg_1E_0;
				if ((arg_1E_0 = this.m_maleLook) == null)
				{
					arg_1E_0 = (this.m_maleLook = ActorLook.Parse(this.MaleLookString));
				}
				return arg_1E_0;
			}
			set
			{
				this.m_maleLook = value;
				this.MaleLookString = this.m_maleLook.ToString();
			}
		}
		[Ignore]
		public ActorLook FemaleLook
		{
			get
			{
				ActorLook arg_1E_0;
				if ((arg_1E_0 = this.m_femaleLook) == null)
				{
					arg_1E_0 = (this.m_femaleLook = ActorLook.Parse(this.FemaleLookString));
				}
				return arg_1E_0;
			}
			set
			{
				this.m_femaleLook = value;
				this.FemaleLookString = this.m_femaleLook.ToString();
			}
		}
		[Ignore]
		public uint[][] StatsPointsForStrength
		{
			get
			{
				uint[][] arg_40_0;
				if ((arg_40_0 = this.m_statsPointsForStrength) == null)
				{
                    arg_40_0 = (this.m_statsPointsForStrength = this.StatsPointsForStrengthCSV.FromCSV("|", (string x) => x.FromCSV<uint>(",")));
				}
				return arg_40_0;
			}
			set
			{
				this.m_statsPointsForStrength = value;
				this.StatsPointsForStrengthCSV = value.ToCSV("|", (uint[] x) => x.ToCSV(","));
			}
		}
		[Ignore]
		public uint[][] StatsPointsForIntelligence
		{
			get
			{
				uint[][] arg_40_0;
				if ((arg_40_0 = this.m_statsPointsForIntelligence) == null)
				{
                    arg_40_0 = (this.m_statsPointsForIntelligence = this.StatsPointsForIntelligenceCSV.FromCSV("|", (string x) => x.FromCSV<uint>(",")));
				}
				return arg_40_0;
			}
			set
			{
				this.m_statsPointsForIntelligence = value;
				this.StatsPointsForIntelligenceCSV = value.ToCSV("|", (uint[] x) => x.ToCSV(","));
			}
		}
		[Ignore]
		public uint[][] StatsPointsForChance
		{
			get
			{
				uint[][] arg_40_0;
				if ((arg_40_0 = this.m_statsPointsForChance) == null)
				{
                    arg_40_0 = (this.m_statsPointsForChance = this.StatsPointsForChanceCSV.FromCSV("|", (string x) => x.FromCSV<uint>(",")));
				}
				return arg_40_0;
			}
			set
			{
				this.m_statsPointsForChance = value;
				this.StatsPointsForChanceCSV = value.ToCSV("|", (uint[] x) => x.ToCSV(","));
			}
		}
		[Ignore]
		public uint[][] StatsPointsForWisdom
		{
			get
			{
				uint[][] arg_40_0;
				if ((arg_40_0 = this.m_statsPointsForWisdom) == null)
				{
                    arg_40_0 = (this.m_statsPointsForWisdom = this.StatsPointsForWisdomCSV.FromCSV("|", (string x) => x.FromCSV<uint>(",")));
				}
				return arg_40_0;
			}
			set
			{
				this.m_statsPointsForWisdom = value;
				this.StatsPointsForWisdomCSV = value.ToCSV("|", (uint[] x) => x.ToCSV(","));
			}
		}
		[Ignore]
		public uint[][] StatsPointsForVitality
		{
			get
			{
				uint[][] arg_40_0;
				if ((arg_40_0 = this.m_statsPointsForVitality) == null)
				{
                    arg_40_0 = (this.m_statsPointsForVitality = this.StatsPointsForVitalityCSV.FromCSV("|", (string x) => x.FromCSV<uint>(",")));
				}
				return arg_40_0;
			}
			set
			{
				this.m_statsPointsForVitality = value;
				this.StatsPointsForVitalityCSV = value.ToCSV("|", (uint[] x) => x.ToCSV(","));
			}
		}
		[Ignore]
		public uint[][] StatsPointsForAgility
		{
			get
			{
				uint[][] arg_40_0;
				if ((arg_40_0 = this.m_statsPointsForAgility) == null)
				{
                    arg_40_0 = (this.m_statsPointsForAgility = this.StatsPointsForAgilityCSV.FromCSV("|", (string x) => x.FromCSV<uint>(",")));
				}
				return arg_40_0;
			}
			set
			{
				this.m_statsPointsForAgility = value;
				this.StatsPointsForAgilityCSV = value.ToCSV("|", (uint[] x) => x.ToCSV(","));
			}
		}
		[Ignore]
		public uint[] MaleColors
		{
			get
			{
				uint[] arg_23_0;
				if ((arg_23_0 = this.m_maleColors) == null)
				{
                    arg_23_0 = (this.m_maleColors = this.MaleColorsCSV.FromCSV<uint>(","));
				}
				return arg_23_0;
			}
			set
			{
				this.m_maleColors = value;
				this.MaleColorsCSV = value.ToCSV(",");
			}
		}
		[Ignore]
		public uint[] FemaleColors
		{
			get
			{
				uint[] arg_23_0;
				if ((arg_23_0 = this.m_femaleColors) == null)
				{
                    arg_23_0 = (this.m_femaleColors = this.FemaleColorsCSV.FromCSV<uint>(","));
				}
				return arg_23_0;
			}
			set
			{
				this.m_femaleColors = value;
				this.FemaleColorsCSV = value.ToCSV(",");
			}
		}
		[Ignore]
		public uint[] BreedSpellsId
		{
			get
			{
				uint[] arg_23_0;
				if ((arg_23_0 = this.m_breedSpellsId) == null)
				{
                    arg_23_0 = (this.m_breedSpellsId = this.BreedSpellsIdCSV.FromCSV<uint>(","));
				}
				return arg_23_0;
			}
			set
			{
				this.m_breedSpellsId = value;
				this.BreedSpellsIdCSV = value.ToCSV(",");
			}
		}
		public Breed()
		{
			this.Items = new System.Collections.Generic.List<BreedItem>();
			this.Spells = new System.Collections.Generic.List<BreedSpell>();
		}
		public void AssignFields(object d2oObject)
		{
			Stump.DofusProtocol.Classes.Breed breed = (Stump.DofusProtocol.Classes.Breed)d2oObject;
			this.Id = breed.id;
			this.GameplayDescriptionId = (int)breed.gameplayDescriptionId;
			this.ShortNameId = (int)breed.shortNameId;
			this.LongNameId = (int)breed.longNameId;
			this.DescriptionId = (int)breed.descriptionId;
			this.MaleLookString = breed.maleLook;
			this.FemaleLookString = breed.femaleLook;
			this.CreatureBonesId = (long)((ulong)breed.creatureBonesId);
			this.MaleArtwork = breed.maleArtwork;
			this.FemaleArtwork = breed.femaleArtwork;
			this.StatsPointsForStrength = (
				from x in breed.statsPointsForStrength
				select x.ToArray()).ToArray<uint[]>();
			this.StatsPointsForIntelligence = (
				from x in breed.statsPointsForIntelligence
				select x.ToArray()).ToArray<uint[]>();
			this.StatsPointsForChance = (
				from x in breed.statsPointsForChance
				select x.ToArray()).ToArray<uint[]>();
			this.StatsPointsForWisdom = (
				from x in breed.statsPointsForWisdom
				select x.ToArray()).ToArray<uint[]>();
			this.StatsPointsForVitality = (
				from x in breed.statsPointsForVitality
				select x.ToArray()).ToArray<uint[]>();
			this.StatsPointsForAgility = (
				from x in breed.statsPointsForAgility
				select x.ToArray()).ToArray<uint[]>();
			this.MaleColors = breed.maleColors.ToArray();
			this.BreedSpellsId = breed.breedSpellsId.ToArray();
			this.FemaleColors = breed.femaleColors.ToArray();
		}
		public void BeforeSave(bool insert)
		{
			this.MaleLookString = this.m_maleLook.ToString();
			this.FemaleLookString = this.m_femaleLook.ToString();
			this.StatsPointsForStrengthCSV = this.m_statsPointsForStrength.ToCSV("|", (uint[] x) => x.ToCSV(","));
			this.StatsPointsForIntelligenceCSV = this.m_statsPointsForIntelligence.ToCSV("|", (uint[] x) => x.ToCSV(","));
			this.StatsPointsForChanceCSV = this.m_statsPointsForChance.ToCSV("|", (uint[] x) => x.ToCSV(","));
			this.StatsPointsForWisdomCSV = this.m_statsPointsForWisdom.ToCSV("|", (uint[] x) => x.ToCSV(","));
			this.StatsPointsForVitalityCSV = this.m_statsPointsForVitality.ToCSV("|", (uint[] x) => x.ToCSV(","));
			this.StatsPointsForAgilityCSV = this.m_statsPointsForAgility.ToCSV("|", (uint[] x) => x.ToCSV(","));
			this.MaleColorsCSV = this.m_maleColors.ToCSV(",");
			this.FemaleColorsCSV = this.m_femaleColors.ToCSV(",");
			this.BreedSpellsIdCSV = this.m_breedSpellsId.ToCSV(",");
		}
		public ObjectPosition GetStartPosition()
		{
			ObjectPosition arg_34_0;
			if ((arg_34_0 = this.m_startPosition) == null)
			{
                arg_34_0 = (this.m_startPosition = new ObjectPosition(Singleton<Game.World>.Instance.GetMap(this.StartMap), this.StartCell, this.StartDirection));
			}
			return arg_34_0;
		}
		public uint[][] GetThresholds(StatsBoostTypeEnum statsid)
		{
			uint[][] result;
			switch (statsid)
			{
			case StatsBoostTypeEnum.Strength:
				result = this.StatsPointsForStrength;
				break;
			case StatsBoostTypeEnum.Vitality:
				result = this.StatsPointsForVitality;
				break;
			case StatsBoostTypeEnum.Wisdom:
				result = this.StatsPointsForWisdom;
				break;
			case StatsBoostTypeEnum.Chance:
				result = this.StatsPointsForChance;
				break;
			case StatsBoostTypeEnum.Agility:
				result = this.StatsPointsForAgility;
				break;
			case StatsBoostTypeEnum.Intelligence:
				result = this.StatsPointsForIntelligence;
				break;
			default:
				throw new System.ArgumentException("statsid");
			}
			return result;
		}
		public uint[] GetThreshold(short actualpoints, StatsBoostTypeEnum statsid)
		{
			uint[][] thresholds = this.GetThresholds(statsid);
			return thresholds[this.GetThresholdIndex((int)actualpoints, thresholds)];
		}
		public int GetThresholdIndex(int actualpoints, uint[][] thresholds)
		{
			int result;
			for (int i = 0; i < thresholds.Length - 1; i++)
			{
				if ((ulong)thresholds[i][0] <= (ulong)((long)actualpoints) && (ulong)thresholds[i + 1][0] > (ulong)((long)actualpoints))
				{
					result = i;
					return result;
				}
			}
			result = thresholds.Length - 1;
			return result;
		}
		public ActorLook GetLook(SexTypeEnum sex, bool clone = false)
		{
			ActorLook result;
			if (clone)
			{
				result = ((sex == SexTypeEnum.SEX_FEMALE) ? this.FemaleLook.Clone() : this.MaleLook.Clone());
			}
			else
			{
				result = ((sex == SexTypeEnum.SEX_FEMALE) ? this.FemaleLook : this.MaleLook);
			}
			return result;
		}
	}
}
