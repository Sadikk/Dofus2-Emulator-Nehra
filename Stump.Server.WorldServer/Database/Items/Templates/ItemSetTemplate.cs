using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Classes;
using Stump.DofusProtocol.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Game.Effects;
using Stump.Server.WorldServer.Game.Effects.Instances;
using Stump.Server.WorldServer.Game.Items;
using System.Linq;
namespace Stump.Server.WorldServer.Database.Items.Templates
{
	[D2OClass("ItemSet", "com.ankamagames.dofus.datacenter.items", true), TableName("items_sets")]
	public sealed class ItemSetTemplate : IAutoGeneratedRecord, ISaveIntercepter, IAssignedByD2O
	{
		private byte[] m_effectsBin;
		private string m_itemsCSV;
		private string m_name;
		[PrimaryKey("Id", false)]
		public uint Id
		{
			get;
			set;
		}
		public string ItemsCSV
		{
			get
			{
				return this.m_itemsCSV;
			}
			set
			{
				this.m_itemsCSV = value;
				if (value != null)
				{
					this.Items = this.DeserializeItems(value);
				}
			}
		}
		[Ignore]
		public ItemTemplate[] Items
		{
			get;
			set;
		}
		public uint NameId
		{
			get;
			set;
		}
		public string Name
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_name) == null)
				{
					arg_23_0 = (this.m_name = Singleton<TextManager>.Instance.GetText(this.NameId));
				}
				return arg_23_0;
			}
		}
		public bool BonusIsSecret
		{
			get;
			set;
		}
		public byte[] EffectsBin
		{
			get
			{
				return this.m_effectsBin;
			}
			set
			{
				this.m_effectsBin = value;
				if (this.m_effectsBin != null)
				{
					this.Effects = this.m_effectsBin.ToObject<System.Collections.Generic.List<System.Collections.Generic.List<EffectBase>>>();
				}
			}
		}
		[Ignore]
		public System.Collections.Generic.List<System.Collections.Generic.List<EffectBase>> Effects
		{
			get;
			set;
		}
		public void AssignFields(object d2oObject)
		{
			ItemSet itemSet = (ItemSet)d2oObject;
			this.Id = (uint)itemSet.id;
			this.ItemsCSV = this.SerializeItems((
				from entry in itemSet.items
				select (int)entry).ToArray<int>());
			this.NameId = itemSet.nameId;
			this.BonusIsSecret = itemSet.bonusIsSecret;
			System.Collections.Generic.List<System.Collections.Generic.List<EffectBase>> obj = (
				from entry in itemSet.effects
				select (
					from subentry in entry
					where subentry != null
					select Singleton<EffectManager>.Instance.ConvertExportedEffect(subentry)).ToList<EffectBase>()).ToList<System.Collections.Generic.List<EffectBase>>();
			this.EffectsBin = obj.ToBinary();
		}
		public void BeforeSave(bool insert)
		{
			this.m_effectsBin = this.Effects.ToBinary();
			bool arg_47_0;
			if (this.Items != null)
			{
				arg_47_0 = !this.Items.All((ItemTemplate x) => x != null);
			}
			else
			{
				arg_47_0 = true;
			}
			if (!arg_47_0)
			{
				this.ItemsCSV = this.SerializeItems((
					from entry in this.Items
					select entry.Id).ToArray<int>());
			}
		}
		public EffectBase[] GetEffects(int itemsCount)
		{
			int num = itemsCount - 1;
			EffectBase[] result;
			if (this.Effects == null || this.Effects.Count <= num || num < 0)
			{
				result = new EffectBase[0];
			}
			else
			{
				result = this.Effects[num].ToArray();
			}
			return result;
		}
		private string SerializeItems(int[] templateIds)
		{
			return templateIds.ToCSV(",");
		}
		private ItemTemplate[] DeserializeItems(string serialized)
		{
            int[] source = serialized.FromCSV<int>(",");
			return (
				from x in source
				select Singleton<ItemManager>.Instance.TryGetTemplate(x)).ToArray<ItemTemplate>();
		}
	}
}
