using Stump.Core.Reflection;
using Stump.DofusProtocol.Classes;
using Stump.DofusProtocol.Tools.D2o;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;

namespace Stump.Server.WorldServer.Database.Items.Templates
{
	[D2OClass("ItemType", "com.ankamagames.dofus.datacenter.items", true), TableName("items_types")]
	public sealed class ItemTypeRecord : IAutoGeneratedRecord, IAssignedByD2O
	{
		private string m_name;
		[PrimaryKey("Id", false)]
		public int Id
		{
			get;
			set;
		}
		public ItemTypeEnum ItemType
		{
			get
			{
				return (ItemTypeEnum)this.Id;
			}
		}
		public uint NameId
		{
			get;
			set;
		}
		public string Name
		{
			get
			{
				string arg_23_0;
				if ((arg_23_0 = this.m_name) == null)
				{
					arg_23_0 = (this.m_name = Singleton<TextManager>.Instance.GetText(this.NameId));
				}
				return arg_23_0;
			}
		}
		public uint SuperTypeId
		{
			get;
			set;
		}
		public ItemSuperTypeEnum SuperType
		{
			get
			{
				return (ItemSuperTypeEnum)this.SuperTypeId;
			}
		}
		public bool Plural
		{
			get;
			set;
		}
		public uint Gender
		{
			get;
			set;
		}
		public uint ZoneMinSize
		{
			get;
			set;
		}
		public uint ZoneSize
		{
			get;
			set;
		}
		public SpellShapeEnum ZoneShape
		{
			get;
			set;
		}
		public bool NeedUseConfirm
		{
			get;
			set;
		}
		public void AssignFields(object d2oObject)
		{
			ItemType itemType = (ItemType)d2oObject;
			this.Id = itemType.id;
			this.NameId = itemType.nameId;
			this.SuperTypeId = itemType.superTypeId;
			this.Plural = itemType.plural;
			this.Gender = itemType.gender;
			this.ParseRawZone(itemType.rawZone);
		}
		private void ParseRawZone(string rawZone)
		{
			if (string.IsNullOrEmpty(rawZone) || rawZone == "null")
			{
				this.ZoneMinSize = 0u;
				this.ZoneSize = 0u;
				this.ZoneShape = (SpellShapeEnum)0;
			}
			else
			{
				char c = rawZone[0];
				char c2 = c;
				SpellShapeEnum zoneShape;
				if (c2 != '#')
				{
					switch (c2)
					{
					case '*':
						zoneShape = SpellShapeEnum.star;
						goto IL_9F;
					case '+':
						zoneShape = SpellShapeEnum.plus;
						goto IL_9F;
					case '-':
						zoneShape = SpellShapeEnum.minus;
						goto IL_9F;
					case '/':
						zoneShape = SpellShapeEnum.slash;
						goto IL_9F;
					}
					zoneShape = (SpellShapeEnum)System.Enum.Parse(typeof(SpellShapeEnum), c.ToString());
				}
				else
				{
					zoneShape = SpellShapeEnum.sharp;
				}
				IL_9F:
				this.ZoneShape = zoneShape;
				if (rawZone.Length > 1)
				{
					int num = rawZone.IndexOf(",", System.StringComparison.Ordinal);
                    try
                    {
                        if (num != -1)
                        {
                            this.ZoneSize = uint.Parse(rawZone.Substring(1, rawZone.Length - num - 1));
                            this.ZoneMinSize = uint.Parse(rawZone.Substring(num + 1, rawZone.Length - (num + 1)));
                        }
                        this.ZoneSize = uint.Parse(rawZone.Substring(1));
                    }
                    catch { }
				}
				else
				{
					this.ZoneSize = 0u;
					this.ZoneMinSize = 0u;
				}
			}
		}
	}
}
