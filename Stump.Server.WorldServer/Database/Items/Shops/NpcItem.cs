using Stump.Core.Cache;
using Stump.DofusProtocol.Types;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using System;
using System.Linq;
namespace Stump.Server.WorldServer.Database.Items.Shops
{
	[TableName("npcs_items")]
	public class NpcItem : ItemToSell, IAutoGeneratedRecord
	{
		private string m_buyCriterion;
		private double? m_customPrice;
		private readonly ObjectValidator<ObjectItemToSellInNpcShop> m_objectItemToSellInNpcShop;
		public int NpcShopId
		{
			get;
			set;
		}
		public double Price
		{
			get
			{
				return this.CustomPrice.HasValue ? this.CustomPrice.Value : base.Item.Price;
			}
		}
		public double? CustomPrice
		{
			get
			{
				return this.m_customPrice;
			}
			set
			{
				this.m_customPrice = value;
				this.m_objectItemToSellInNpcShop.Invalidate();
			}
		}
		[NullString]
		public string BuyCriterion
		{
			get
			{
				return this.m_buyCriterion;
			}
			set
			{
				this.m_buyCriterion = (value ?? string.Empty);
				this.m_objectItemToSellInNpcShop.Invalidate();
			}
		}
		public bool MaxStats
		{
			get;
			set;
		}
		public NpcItem()
		{
			this.m_objectItemToSellInNpcShop = new ObjectValidator<ObjectItemToSellInNpcShop>(new Func<ObjectItemToSellInNpcShop>(this.BuildObjectItemToSellInNpcShop));
		}
		private ObjectItemToSellInNpcShop BuildObjectItemToSellInNpcShop()
		{
			return new ObjectItemToSellInNpcShop((ushort)base.Item.Id,
				from entry in base.Item.Effects
				select entry.GetObjectEffect(), (uint)(this.CustomPrice.HasValue ? this.CustomPrice.Value : base.Item.Price), this.BuyCriterion ?? string.Empty);
		}
		public override Item GetNetworkItem()
		{
			return this.m_objectItemToSellInNpcShop;
		}
	}
}
