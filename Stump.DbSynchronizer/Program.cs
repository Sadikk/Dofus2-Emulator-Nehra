using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DbSynchronizer.Protocol.D2I;
using Stump.DbSynchronizer.Protocol.D2P;
using Stump.DbSynchronizer.Protocol.DLM;
using Stump.DbSynchronizer.Protocol.Elements;
using Stump.DbSynchronizer.Protocol.GameData;
using Stump.DofusProtocol.Classes;
using Stump.DofusProtocol.Tools.D2o;
using Stump.ORM;
using Stump.Server.BaseServer.Database.Interfaces;
using Stump.Server.WorldServer.Database;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Database.World.Maps;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;

namespace Stump.DbSynchronizer
{
    class Program
    {
        private static DatabaseConfiguration _databaseConfiguration = new DatabaseConfiguration
		{
			Host = "localhost",
            DbName = "new_stump_sync",
			User = "root",
			Password = "",
			ProviderName = "MySql.Data.MySqlClient"
		};

        private static DatabaseAccessor _accessor = new DatabaseAccessor(Program._databaseConfiguration);
        private static string _clientPath = @"C:\Users\Damien\Desktop\Elyofia 2.29\Client";
        private static Dictionary<string, Type> _mappingEntry = new Dictionary<string, Type>();

        static void Main(string[] args)
        {
            Program._accessor.RegisterMappingAssembly(typeof(Stump.Server.WorldServer.WorldServer).Assembly);
            Program._accessor.RegisterMappingAssembly(typeof(Stump.Server.AuthServer.AuthServer).Assembly);

            Program._accessor.Initialize(TypePredicate);

            Console.WriteLine("Opening Database ...");
            Program._accessor.OpenConnection();

            Console.WriteLine("Parsing element file ...");
            Program.ReadElementFile();

            //Console.WriteLine("Parsing d2o files ...");
            //Program.ReadD2OFiles();

            Console.WriteLine("Parsing d2p files ...");
            Program.ReadD2PFiles();

            //Console.WriteLine("Parsing d2i files ...");
            //Program.ReadD2IFiles();

            Console.WriteLine("Press any key to exit ...");
            Console.ReadKey(true);
        }

        private static bool TypePredicate(Type type)
        {
            if (((type.GetInterface(typeof(IAutoGeneratedRecord).FullName, true) != null || 
                    type.GetInterface(typeof(IManualGeneratedRecord).FullName, true) != null) &&
                    type.GetInterface(typeof(IAssignedByD2O).FullName, true) != null &&
                    type.GetCustomAttribute(typeof(D2OClassAttribute), false) != null))
            {
                var attribute = (D2OClassAttribute)type.GetCustomAttribute(typeof(D2OClassAttribute), false);

                Program._mappingEntry.Add(attribute.Name, type);

                return true;
            }
            if (type.GetInterface(typeof(ILangText).FullName, true) != null || 
                type.GetInterface(typeof(ILangTextUI).FullName, true) != null ||
                type == typeof(MapRecord))
            {
                return true;
            }

            return false;
        }

        private static void HandleD2oObject(object element)
        {
            var instance = Activator.CreateInstance(Program._mappingEntry[element.GetType().Name]) as IAssignedByD2O;

            instance.AssignFields(element);
            if (element is Monster)
            {
                (element as Monster).grades.ForEach(entry => Program.HandleD2oObject(entry));
            }

            Program._accessor.Database.Insert(instance);
        }

        public static void ReadElementFile()
        {
            Singleton<Element>.Instance.FromRaw(new BigEndianReader(Program.Uncompress(File.ReadAllBytes(string.Format(@"{0}\app\content\maps\elements.ele", _clientPath)))));
        }

        public static void ReadD2PFiles()
        {
            var protocol = new PakProtocol();
            protocol.Load(string.Format(@"{0}\app\content\maps\maps0.d2p", _clientPath));
            protocol.Load(string.Format(@"{0}\app\content\gfx\world\gfx0.d2p", _clientPath));

            foreach (var item in protocol.GetIndexes())
            {
                foreach (var pair in item.Value)
                {
                    var reader = pair.Value.Item3;
                    reader.Seek(pair.Value.Item1, SeekOrigin.Begin);

                    if (pair.Key.EndsWith(".dlm")) // map
                    {
                        var map = new Map();
                        map.FromRaw(new BigEndianReader(Program.Uncompress(reader.ReadBytes(pair.Value.Item2))));

                        var render = new MapRenderer();
                        render.Render(map);

                        Program._accessor.Database.Update(Program.GenerateMapRecord(map));
                    }
                    else // gfx
                    {
                        var filePath = string.Format("./gfx/{0}", pair.Key);

                        if (!Directory.Exists(Path.GetDirectoryName(filePath)))
                        {
                            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
                        }

                        using (var stream = File.Create(filePath))
                        {
                            var writer = new BigEndianWriter(stream);

                            writer.WriteBytes(reader.ReadBytes(pair.Value.Item2));
                        }
                    }
                }
            }
        }

        public static void ReadD2IFiles()
        {
            var langs = Program._accessor.Database.Query<LangText>(LangTextRelator.FetchQuery, new object[0]).ToDictionary(entry => entry.Id);
            var langsUI = Program._accessor.Database.Query<LangTextUi>(LangTextUiRelator.FetchQuery, new object[0]).ToDictionary(entry => entry.Name);

            foreach (var item in Directory.GetFiles(string.Format(@"{0}\app\data\i18n\", _clientPath), "*.d2i*", SearchOption.TopDirectoryOnly))
            {
                var match = Regex.Match(Path.GetFileName(item), "i18n_(?<lang>[a-zA-Z]{2}).d2i");
                if (match.Success)
                {
                    var d2iFile = new D2IFile(item);

                    Action<LangText, string> langAction = null;
                    Action<LangTextUi, string> langUIAction = null;

                    switch(match.Groups["lang"].Value)
                    {
                        case "de":
                            langAction = new Action<LangText, string>((lang, value) => { lang.Dutsh = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.Dutsh = value; });
                            break;

                        case "en":
                            langAction = new Action<LangText, string>((lang, value) => { lang.English = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.English = value; });
                            break;

                        case "es":
                            langAction = new Action<LangText, string>((lang, value) => { lang.Spanish = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.Spanish = value; });
                            break;

                        case "fr":
                            langAction = new Action<LangText, string>((lang, value) => { lang.French = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.French = value; });
                            break;

                        case "it":
                            langAction = new Action<LangText, string>((lang, value) => { lang.Italian = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.Italian = value; });
                            break;

                        case "ja":
                            langAction = new Action<LangText, string>((lang, value) => { lang.Japanish = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.Japanish = value; });
                            break;

                        case "pt":
                            langAction = new Action<LangText, string>((lang, value) => { lang.Portugese = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.Portugese = value; });
                            break;

                        case "ru":
                            langAction = new Action<LangText, string>((lang, value) => { lang.Russish = value; });
                            langUIAction = new Action<LangTextUi, string>((lang, value) => { lang.Russish = value; });
                            break;

                        default:
                            break;
                    }

                    foreach (var lang in d2iFile.GetAllText())
                    {
                        if (!langs.ContainsKey((uint)lang.Key))
                        {
                            langs.Add((uint)lang.Key, new LangText { Id = (uint)lang.Key });
                        }

                        langAction(langs[(uint)lang.Key], lang.Value);
                    }
                    foreach (var langUi in d2iFile.GetAllUiText())
                    {
                        if (!langsUI.ContainsKey(langUi.Key))
                        {
                            langsUI.Add(langUi.Key, new LangTextUi { Name = langUi.Key });
                        }

                        langUIAction(langsUI[langUi.Key], langUi.Value);
                    }
                }
            }

            foreach (var item in langs)
            {
                Program._accessor.Database.Insert(item.Value);
            }
            foreach (var item in langsUI)
            {
                Program._accessor.Database.Insert(item.Value);
            }
        }

        public static void ReadD2OFiles()
        {
            foreach (var item in Directory.GetFiles(string.Format(@"{0}\app\data\common\", _clientPath), "*.d2o*", SearchOption.TopDirectoryOnly))
            {
                try
                {
                    Singleton<GameDataFileAccessor>.Instance.Init(item);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }

            Console.WriteLine("Generating data ...");
            foreach (var item in Program._mappingEntry)
            {
                Console.Write("Current table : {0} ...", item.Key);

                var type = typeof(IDataObject).Assembly.GetType(string.Format("Stump.DofusProtocol.Classes.{0}", item.Key));
                if (type != null)
                {
                    var attribute = (D2OClassAttribute)type.GetCustomAttribute(typeof(D2OClassAttribute), false);
                    var objects = Singleton<GameDataFileAccessor>.Instance.GetObjects(attribute.Name);
                    if (objects != null)
                    {
                        Console.WriteLine(" - {0} elements for type '{1}'.", objects.Length, attribute.Name);
                        foreach (var element in objects)
                        {
                            Program.HandleD2oObject(element);
                        }
                    }
                    else
                    {
                        Console.WriteLine();
                    }
                }
                else
                {
                    Console.Write("No link between the table '{0}' and a d2o object.", item.Key);
                }
            }
        }

        private static Stream Uncompress(byte[] buffer)
        {
            var stream = new MemoryStream();
            var data = new byte[buffer.Length - 2];
            Array.Copy(buffer, 2, data, 0, buffer.Length - 2);

            var temp = new MemoryStream(data);
            using (var deflate = new DeflateStream(temp, CompressionMode.Decompress))
            {
                deflate.CopyTo(stream);
            }
            stream.Seek(0, SeekOrigin.Begin);
            return stream;
        }

        private static MapRecord GenerateMapRecord(Map map)
        {
            var record = new MapRecord
            {
                Id = (int)map.id,
                Version = map.mapVersion,
                RelativeId = map.relativeId,
                MapType = map.mapType,
                SubAreaId = map.subareaId,
                TopNeighbourId = map.topNeighbourId,
                BottomNeighbourId = map.bottomNeighbourId,
                LeftNeighbourId = map.leftNeighbourId,
                RightNeighbourId = map.rightNeighbourId,
                ClientTopNeighbourId = map.topNeighbourId,
                ClientBottomNeighbourId = map.bottomNeighbourId,
                ClientLeftNeighbourId = map.leftNeighbourId,
                ClientRightNeighbourId = map.rightNeighbourId,
                ShadowBonusOnEntities = map.shadowBonusOnEntities,
                UseLowpassFilter = map.useLowPassFilter,
                UseReverb = map.useReverb,
                PresetId = map.presetId,
                BlueFightCells = (from cell in map.cells where cell.Blue select (short)cell.id).ToArray(),
                RedFightCells = (from cell in map.cells where cell.Red select (short)cell.id).ToArray()
            };

            record.Elements = new MapElement[0];
            record.Cells = (from cell in map.cells
                         select new Stump.Server.WorldServer.Database.World.Cell
                         {
                             Id = (short)cell.id,
                             Floor = (short)cell.Floor,
                             LosMov = cell.LosMov,
                             MapChangeData = cell.mapChangeData,
                             Speed = cell.speed,
                             MoveZone = cell.moveZone,
                         }).ToArray();

            return record;
        }
    }
}